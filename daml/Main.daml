-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where

import DA.List
import Balance qualified

data AcceptResponse = AccountCreation (ContractId Account) | NewAccountProposal (ContractId AccountProposal)

isSubset s1 s2 = all (\x -> elem x s2) s1


type AccountKey = ([Party], Text)

template AccountProposal
  with
    pendingMembers: [Party]
    members: [Party]
    name: Text

  where
    signatory members
    observer pendingMembers

    ensure
      and [
        all (\x -> notElem x pendingMembers) members,
        not $ null pendingMembers
      ]

    choice Accept : AcceptResponse
      with
        acceptingMember: Party
      controller acceptingMember
      do
        assert $ elem acceptingMember pendingMembers
        let remainingPendingMembers = delete acceptingMember pendingMembers
        let newMembers = acceptingMember :: members

        if null remainingPendingMembers then
          do
            cid <- create Account with
              balance = Balance.init newMembers
              name = name
            pure $ AccountCreation cid
        else
          do
            cid <- create this with
              pendingMembers = remainingPendingMembers
              members = newMembers
            pure $ NewAccountProposal cid

template Account
  with
    balance: Balance.Balance
    name: Text

  where
    let
      members = Balance.members balance
      accountKey = (sort $ members, name)
    signatory members
    ensure Balance.sum balance == 0.0

    key accountKey : AccountKey
    maintainer key._1

    nonconsuming choice SubmitExpense : (ContractId Expense, [ContractId ExpenseNotification])
      with
        description: Text
        payer: Party
        amount: Decimal
      controller payer
      do
        expense <- pure $ Expense description payer members amount accountKey
        expenseId <- create expense
        notifications <- mapA (\approver -> create $ ExpenseNotification expense expenseId approver) (filter (payer /=) members)
        pure (expenseId, notifications)

    choice SettleExpense : ContractId Account
      with
        payer: Party
        expenseId: ContractId Expense
        approvalIds: [ContractId ExpenseApproval]
      controller payer
      do
        expense <- fetch expenseId
        approvals <- (mapA fetch approvalIds)
        signers <- pure $ payer :: map (\x -> x.approver) approvals
        assert $ expense.beneficiaries `isSubset` members
        assert $ expense.payer == payer
        assert $ expense.beneficiaries `isSubset` signers
        assert $ all (\x -> x.expense == expenseId) approvals
        _ <- archive expenseId
        _ <- mapA archive approvalIds
        create this with
           balance = Balance.add balance (Balance.expenseToBalance expense.amount expense.payer members)

template Expense
  with
    description: Text
    payer: Party
    beneficiaries: [Party]
    amount: Decimal
    account: AccountKey
  where
    signatory payer
    observer beneficiaries

template ExpenseNotification
  with
    expense: Expense
    expenseId: ContractId Expense
    approver: Party
  where
    signatory expense.payer
    observer approver

    choice Sign: ContractId ExpenseApproval
      controller approver
        do
          create ExpenseApproval with
            payer = expense.payer
            approver = approver
            expense = expenseId



template ExpenseApproval
  with
    payer: Party
    approver: Party
    expense: ContractId Expense
  where
    signatory approver
    observer payer

basicAccountWithExpenses = scenario do

  martin <- getParty "Martin"
  oliver <- getParty "Oliver"
  remy <- getParty "Remy"

  accountName <- pure "flat share thurgauerstrasse"

  cid <- submit martin do
    create AccountProposal with
      pendingMembers = [oliver, remy]
      members = [martin]
      name = accountName

  proposalByMartin <-
      submit oliver do
        exercise cid (Accept oliver)

  proposalWithMartinAndOliver <- case proposalByMartin of
    AccountCreation _ -> error "Need Remy to accept"
    NewAccountProposal cid ->
      submit remy do
        exercise cid (Accept remy)

  account <- case proposalWithMartinAndOliver of
    NewAccountProposal _ -> error "Everybody has accepted so should have account"
    AccountCreation cid -> pure cid

  accountKey <- pure ([martin, oliver, remy], accountName)

  -- BUGBUG: Should make scenario fail but doesn't if Accept changed to nonconuming
  -- duplicate_account <- case proposalWithMartinAndOliver of
  --   NewAccountProposal _ -> error "Everybody has accepted so should have account"
  --   AccountCreation cid -> pure cid

  _ <- submit remy do exerciseByKey @Account accountKey (SubmitExpense "candies" remy 100.0)

  _ <- submit oliver do exerciseByKey @Account accountKey (SubmitExpense "chocolate" oliver 70.0)

  pure account

setup = scenario do

  martin <- getParty "Martin"
  oliver <- getParty "Oliver"
  remy <- getParty "Remy"

  accountName <- pure "Thurgauerstrasse flat"

  cid <- submit martin do
    create AccountProposal with
      pendingMembers = [oliver, remy]
      members = [martin]
      name = accountName

  proposalByMartin <-
      submit oliver do
        exercise cid (Accept oliver)

  proposalWithMartinAndOliver <- case proposalByMartin of
    AccountCreation _ -> error "Need Remy to accept"
    NewAccountProposal cid ->
      submit remy do
        exercise cid (Accept remy)

  account <- case proposalWithMartinAndOliver of
    NewAccountProposal _ -> error "Everybody has accepted so should have account"
    AccountCreation cid -> pure cid

  accountKey <- pure (sort [martin, oliver, remy], accountName)

  (expenseCableTVBill, [oliversNotId, remyNotId]) <- submit martin do exerciseByKey @Account accountKey (SubmitExpense "Cable TV" martin 100.0)
  remySignature <- submit remy do exercise remyNotId Sign
  oliverSignature <- submit oliver do exercise oliversNotId Sign
  _ <- submit martin do exerciseByKey @Account accountKey (SettleExpense martin expenseCableTVBill [oliverSignature, remySignature])

  (expensePetShampooingFund, [martinNotId, remyNotId]) <- submit oliver do exerciseByKey @Account accountKey (SubmitExpense "Pet shampooing" oliver 70.0)
  remySignature <- submit remy do exercise remyNotId Sign
  martinSignature <- submit martin do exercise martinNotId Sign
  -- _ <- submit oliver do exerciseByKey @Account accountKey (SettleExpense oliver expensePetShampooingFund [martinSignature, remySignature])

  pure account
