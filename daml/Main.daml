-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where

import DA.Action
import DA.Next.Map qualified as Map
import DA.List
import Balance qualified

data AcceptResponse = AccountCreation (ContractId Account) | NewAccountProposal (ContractId AccountProposal)

isSubset s1 s2 = all (\x -> elem x s2) s1


type AccountKey = ([Party], Text)

template AccountProposal
  with
    pendingMembers: [Party]
    members: [Party]
    name: Text

  where
    signatory members
    observer pendingMembers

    ensure
      and [
        all (\x -> notElem x pendingMembers) members,
        not $ null pendingMembers
      ]

    choice Accept : AcceptResponse
      with
        acceptingMember: Party
      controller acceptingMember
      do
        assert $ elem acceptingMember pendingMembers
        let remainingPendingMembers = delete acceptingMember pendingMembers
        let newMembers = acceptingMember :: members

        if null remainingPendingMembers then
          do
            cid <- create Account with
              balance = Balance.init newMembers
              name = name
            pure $ AccountCreation cid
        else
          do
            cid <- create this with
              pendingMembers = remainingPendingMembers
              members = newMembers
            pure $ NewAccountProposal cid

template Account
  with
    balance: Balance.Balance
    name: Text

  where
    let 
      members = Balance.members balance
      accountKey = (members, name)
    signatory members
    ensure Balance.sum balance == 0.0

    key accountKey : AccountKey
    maintainer key._1

    nonconsuming choice SubmitExpense : ContractId Expense
      with
        payer: Party
        amount: Decimal
      controller payer
      do
        create $ Expense payer members amount accountKey

    choice SettleExpense : ContractId Account
      with
        payer: Party
        expenseId: ContractId Expense
        approvalIds: [ContractId ExpenseApproval]
      controller payer
      do
        expense <- fetch expenseId
        approvals <- (mapA fetch approvalIds)
        signers <- pure $ payer :: map (\x -> x.beneficiary) approvals
        assert $ expense.beneficiaries `isSubset` members
        assert $ expense.payer == payer
        assert $ expense.beneficiaries `isSubset` signers
        assert $ all (\x -> x.expense == expenseId) approvals
        _ <- archive expenseId
        _ <- mapA archive approvalIds
        create this with
           balance = Balance.add balance (Balance.expenseToBalance expense.amount expense.payer members)

template Expense
  with
    payer: Party
    beneficiaries: [Party]
    amount: Decimal
    account: AccountKey
  where
    signatory payer
    observer beneficiaries

    nonconsuming choice Sign : ContractId ExpenseApproval
      with
        signer: Party
      controller signer
      do
        create ExpenseApproval with
          payer = payer
          beneficiary = signer
          expense = self

template ExpenseApproval
  with
    payer: Party
    beneficiary: Party
    expense: ContractId Expense

  where
    signatory beneficiary
    observer payer

basicAccountWithExpenses = scenario do

  andreas <- getParty "Andreas"
  bernhard <- getParty "Bernhard"
  cerolf <- getParty "Cerolf"

  accountName <- pure "flat share thurgauerstrasse"

  cid <- submit andreas do
    create AccountProposal with
      pendingMembers = [bernhard, cerolf]
      members = [andreas]
      name = accountName

  proposalByAndreas <-
      submit bernhard do
        exercise cid (Accept bernhard)

  proposalWithAndreasAndBernhard <- case proposalByAndreas of
    AccountCreation _ -> error "Need Cerolf to accept"
    NewAccountProposal cid ->
      submit cerolf do
        exercise cid (Accept cerolf)

  account <- case proposalWithAndreasAndBernhard of
    NewAccountProposal _ -> error "Everybody has accepted so should have account"
    AccountCreation cid -> pure cid

  accountKey <- pure ([andreas, bernhard, cerolf], accountName)

  -- BUGBUG: Should make scenario fail but doesn't if Accept changed to nonconuming
  -- duplicate_account <- case proposalWithAndreasAndBernhard of
  --   NewAccountProposal _ -> error "Everybody has accepted so should have account"
  --   AccountCreation cid -> pure cid

  _ <- submit cerolf do exerciseByKey @Account accountKey (SubmitExpense cerolf 100.0)

  _ <- submit bernhard do exerciseByKey @Account accountKey (SubmitExpense bernhard 70.0)

  pure account

setup = scenario do
 
  andreas <- getParty "Andreas"
  bernhard <- getParty "Bernhard"
  cerolf <- getParty "Cerolf"

  accountName <- pure "flat share thurgauerstrasse"

  cid <- submit andreas do
    create AccountProposal with
      pendingMembers = [bernhard, cerolf]
      members = [andreas]
      name = accountName

  proposalByAndreas <-
      submit bernhard do
        exercise cid (Accept bernhard)

  proposalWithAndreasAndBernhard <- case proposalByAndreas of
    AccountCreation _ -> error "Need Cerolf to accept"
    NewAccountProposal cid ->
      submit cerolf do
        exercise cid (Accept cerolf)

  account <- case proposalWithAndreasAndBernhard of
    NewAccountProposal _ -> error "Everybody has accepted so should have account"
    AccountCreation cid -> pure cid

  accountKey <- pure ([andreas, bernhard, cerolf], accountName)

  expenseCableTVBill <- submit andreas do exerciseByKey @Account accountKey (SubmitExpense andreas 100.0)
  cerolfSignature <- submit cerolf do exercise expenseCableTVBill $ Sign cerolf
  bernhardSignature <- submit bernhard do exercise expenseCableTVBill $ Sign bernhard
  _ <- submit andreas do exerciseByKey @Account accountKey (SettleExpense andreas expenseCableTVBill [bernhardSignature, cerolfSignature])

  expensePetShampooingFund <- submit bernhard do exerciseByKey @Account accountKey (SubmitExpense bernhard 70.0)
  cerolfSignature <- submit cerolf do exercise expensePetShampooingFund $ Sign cerolf
  andreasSignature <- submit andreas do exercise expensePetShampooingFund $ Sign andreas
  -- _ <- submit bernhard do exerciseByKey @Account accountKey (SettleExpense bernhard expensePetShampooingFund [andreasSignature, cerolfSignature])

  pure account
