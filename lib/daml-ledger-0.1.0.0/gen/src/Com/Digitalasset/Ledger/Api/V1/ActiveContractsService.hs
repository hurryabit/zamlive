{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.ActiveContractsService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Com.Digitalasset.Ledger.Api.V1.Event
import qualified Com.Digitalasset.Ledger.Api.V1.TransactionFilter
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
 
data ActiveContractsService request
     response = ActiveContractsService{activeContractsServiceGetActiveContracts
                                       ::
                                       request 'HsGRPC.ServerStreaming
                                         Com.Digitalasset.Ledger.Api.V1.ActiveContractsService.GetActiveContractsRequest
                                         Com.Digitalasset.Ledger.Api.V1.ActiveContractsService.GetActiveContractsResponse
                                         ->
                                         Hs.IO
                                           (response 'HsGRPC.ServerStreaming
                                              Com.Digitalasset.Ledger.Api.V1.ActiveContractsService.GetActiveContractsResponse)}
              deriving Hs.Generic
 
activeContractsServiceServer ::
                               ActiveContractsService HsGRPC.ServerRequest HsGRPC.ServerResponse
                                 -> HsGRPC.ServiceOptions -> Hs.IO ()
activeContractsServiceServer
  ActiveContractsService{activeContractsServiceGetActiveContracts =
                           activeContractsServiceGetActiveContracts}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers = [],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers =
                               [(HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.ActiveContractsService/GetActiveContracts")
                                   (HsGRPC.convertGeneratedServerWriterHandler
                                      activeContractsServiceGetActiveContracts))],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
activeContractsServiceClient ::
                               HsGRPC.Client ->
                                 Hs.IO
                                   (ActiveContractsService HsGRPC.ClientRequest HsGRPC.ClientResult)
activeContractsServiceClient client
  = (Hs.pure ActiveContractsService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.ActiveContractsService/GetActiveContracts")))
 
data GetActiveContractsRequest = GetActiveContractsRequest{getActiveContractsRequestLedgerId
                                                           :: Hs.Text,
                                                           getActiveContractsRequestFilter ::
                                                           Hs.Maybe
                                                             Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter,
                                                           getActiveContractsRequestVerbose ::
                                                           Hs.Bool,
                                                           getActiveContractsRequestTraceContext ::
                                                           Hs.Maybe
                                                             Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetActiveContractsRequest where
        nameOf _ = (Hs.fromString "GetActiveContractsRequest")
 
instance HsProtobuf.HasDefault GetActiveContractsRequest
 
instance HsProtobuf.Message GetActiveContractsRequest where
        encodeMessage _
          GetActiveContractsRequest{getActiveContractsRequestLedgerId =
                                      getActiveContractsRequestLedgerId,
                                    getActiveContractsRequestFilter =
                                      getActiveContractsRequestFilter,
                                    getActiveContractsRequestVerbose =
                                      getActiveContractsRequestVerbose,
                                    getActiveContractsRequestTraceContext =
                                      getActiveContractsRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getActiveContractsRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter)
                      getActiveContractsRequestFilter)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   getActiveContractsRequestVerbose),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getActiveContractsRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetActiveContractsRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TransactionFilter")))
                (HsProtobuf.Single "filter")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "verbose")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetActiveContractsRequest where
        toJSONPB (GetActiveContractsRequest f1 f2 f3 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "filter" .= f2, "verbose" .= f3,
                "trace_context" .= f1000])
        toEncodingPB (GetActiveContractsRequest f1 f2 f3 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "filter" .= f2, "verbose" .= f3,
                "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetActiveContractsRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetActiveContractsRequest"
               (\ obj ->
                  (Hs.pure GetActiveContractsRequest) <*> obj .: "ledger_id" <*>
                    obj .: "filter"
                    <*> obj .: "verbose"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetActiveContractsRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetActiveContractsRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetActiveContractsRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getActiveContractsRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_filter = HsJSONPB.declareSchemaRef
               getActiveContractsRequestFilter <- declare_filter Proxy.Proxy
               let declare_verbose = HsJSONPB.declareSchemaRef
               getActiveContractsRequestVerbose <- declare_verbose Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getActiveContractsRequestTraceContext <- declare_trace_context
                                                          Proxy.Proxy
               let _ = Hs.pure GetActiveContractsRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_filter
                         <*> HsJSONPB.asProxy declare_verbose
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetActiveContractsRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getActiveContractsRequestLedgerId),
                                                        ("filter", getActiveContractsRequestFilter),
                                                        ("verbose",
                                                         getActiveContractsRequestVerbose),
                                                        ("trace_context",
                                                         getActiveContractsRequestTraceContext)]}})
 
data GetActiveContractsResponse = GetActiveContractsResponse{getActiveContractsResponseOffset
                                                             :: Hs.Text,
                                                             getActiveContractsResponseWorkflowId ::
                                                             Hs.Text,
                                                             getActiveContractsResponseActiveContracts
                                                             ::
                                                             Hs.Vector
                                                               Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent,
                                                             getActiveContractsResponseTraceContext
                                                             ::
                                                             Hs.Maybe
                                                               Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetActiveContractsResponse where
        nameOf _ = (Hs.fromString "GetActiveContractsResponse")
 
instance HsProtobuf.HasDefault GetActiveContractsResponse
 
instance HsProtobuf.Message GetActiveContractsResponse where
        encodeMessage _
          GetActiveContractsResponse{getActiveContractsResponseOffset =
                                       getActiveContractsResponseOffset,
                                     getActiveContractsResponseWorkflowId =
                                       getActiveContractsResponseWorkflowId,
                                     getActiveContractsResponseActiveContracts =
                                       getActiveContractsResponseActiveContracts,
                                     getActiveContractsResponseTraceContext =
                                       getActiveContractsResponseTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getActiveContractsResponseOffset),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getActiveContractsResponseWorkflowId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent)
                      getActiveContractsResponseActiveContracts)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getActiveContractsResponseTraceContext))])
        decodeMessage _
          = (Hs.pure GetActiveContractsResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "offset")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "workflow_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "CreatedEvent")))
                (HsProtobuf.Single "active_contracts")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetActiveContractsResponse where
        toJSONPB (GetActiveContractsResponse f1 f2 f3 f1000)
          = (HsJSONPB.object
               ["offset" .= f1, "workflow_id" .= f2, "active_contracts" .= f3,
                "trace_context" .= f1000])
        toEncodingPB (GetActiveContractsResponse f1 f2 f3 f1000)
          = (HsJSONPB.pairs
               ["offset" .= f1, "workflow_id" .= f2, "active_contracts" .= f3,
                "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetActiveContractsResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetActiveContractsResponse"
               (\ obj ->
                  (Hs.pure GetActiveContractsResponse) <*> obj .: "offset" <*>
                    obj .: "workflow_id"
                    <*> obj .: "active_contracts"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetActiveContractsResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetActiveContractsResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetActiveContractsResponse where
        declareNamedSchema _
          = do let declare_offset = HsJSONPB.declareSchemaRef
               getActiveContractsResponseOffset <- declare_offset Proxy.Proxy
               let declare_workflow_id = HsJSONPB.declareSchemaRef
               getActiveContractsResponseWorkflowId <- declare_workflow_id
                                                         Proxy.Proxy
               let declare_active_contracts = HsJSONPB.declareSchemaRef
               getActiveContractsResponseActiveContracts <- declare_active_contracts
                                                              Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getActiveContractsResponseTraceContext <- declare_trace_context
                                                           Proxy.Proxy
               let _ = Hs.pure GetActiveContractsResponse <*>
                         HsJSONPB.asProxy declare_offset
                         <*> HsJSONPB.asProxy declare_workflow_id
                         <*> HsJSONPB.asProxy declare_active_contracts
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetActiveContractsResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("offset",
                                                         getActiveContractsResponseOffset),
                                                        ("workflow_id",
                                                         getActiveContractsResponseWorkflowId),
                                                        ("active_contracts",
                                                         getActiveContractsResponseActiveContracts),
                                                        ("trace_context",
                                                         getActiveContractsResponseTraceContext)]}})