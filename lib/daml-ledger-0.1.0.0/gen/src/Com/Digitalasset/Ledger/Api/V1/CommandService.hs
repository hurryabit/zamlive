{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.CommandService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Com.Digitalasset.Ledger.Api.V1.Commands
import qualified Google.Protobuf.Empty
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
import qualified Com.Digitalasset.Ledger.Api.V1.Transaction
 
data CommandService request
     response = CommandService{commandServiceSubmitAndWait ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitRequest
                                 Google.Protobuf.Empty.Empty
                                 -> Hs.IO (response 'HsGRPC.Normal Google.Protobuf.Empty.Empty),
                               commandServiceSubmitAndWaitForTransactionId ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitRequest
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionIdResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionIdResponse),
                               commandServiceSubmitAndWaitForTransaction ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitRequest
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionResponse),
                               commandServiceSubmitAndWaitForTransactionTree ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitRequest
                                 Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionTreeResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.CommandService.SubmitAndWaitForTransactionTreeResponse)}
              deriving Hs.Generic
 
commandServiceServer ::
                       CommandService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                         HsGRPC.ServiceOptions -> Hs.IO ()
commandServiceServer
  CommandService{commandServiceSubmitAndWait =
                   commandServiceSubmitAndWait,
                 commandServiceSubmitAndWaitForTransactionId =
                   commandServiceSubmitAndWaitForTransactionId,
                 commandServiceSubmitAndWaitForTransaction =
                   commandServiceSubmitAndWaitForTransaction,
                 commandServiceSubmitAndWaitForTransactionTree =
                   commandServiceSubmitAndWaitForTransactionTree}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWait")
                                   (HsGRPC.convertGeneratedServerHandler
                                      commandServiceSubmitAndWait)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransactionId")
                                   (HsGRPC.convertGeneratedServerHandler
                                      commandServiceSubmitAndWaitForTransactionId)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransaction")
                                   (HsGRPC.convertGeneratedServerHandler
                                      commandServiceSubmitAndWaitForTransaction)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransactionTree")
                                   (HsGRPC.convertGeneratedServerHandler
                                      commandServiceSubmitAndWaitForTransactionTree))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
commandServiceClient ::
                       HsGRPC.Client ->
                         Hs.IO (CommandService HsGRPC.ClientRequest HsGRPC.ClientResult)
commandServiceClient client
  = (Hs.pure CommandService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWait")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransactionId")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransaction")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.CommandService/SubmitAndWaitForTransactionTree")))
 
data SubmitAndWaitRequest = SubmitAndWaitRequest{submitAndWaitRequestCommands
                                                 ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.Commands.Commands,
                                                 submitAndWaitRequestTraceContext ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SubmitAndWaitRequest where
        nameOf _ = (Hs.fromString "SubmitAndWaitRequest")
 
instance HsProtobuf.HasDefault SubmitAndWaitRequest
 
instance HsProtobuf.Message SubmitAndWaitRequest where
        encodeMessage _
          SubmitAndWaitRequest{submitAndWaitRequestCommands =
                                 submitAndWaitRequestCommands,
                               submitAndWaitRequestTraceContext =
                                 submitAndWaitRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.Commands)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.Commands)
                      submitAndWaitRequestCommands)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      submitAndWaitRequestTraceContext))])
        decodeMessage _
          = (Hs.pure SubmitAndWaitRequest) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.Commands))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.Commands))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Commands")))
                (HsProtobuf.Single "commands")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SubmitAndWaitRequest where
        toJSONPB (SubmitAndWaitRequest f1 f1000)
          = (HsJSONPB.object ["commands" .= f1, "trace_context" .= f1000])
        toEncodingPB (SubmitAndWaitRequest f1 f1000)
          = (HsJSONPB.pairs ["commands" .= f1, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB SubmitAndWaitRequest where
        parseJSONPB
          = (HsJSONPB.withObject "SubmitAndWaitRequest"
               (\ obj ->
                  (Hs.pure SubmitAndWaitRequest) <*> obj .: "commands" <*>
                    obj .: "trace_context"))
 
instance HsJSONPB.ToJSON SubmitAndWaitRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SubmitAndWaitRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SubmitAndWaitRequest where
        declareNamedSchema _
          = do let declare_commands = HsJSONPB.declareSchemaRef
               submitAndWaitRequestCommands <- declare_commands Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               submitAndWaitRequestTraceContext <- declare_trace_context
                                                     Proxy.Proxy
               let _ = Hs.pure SubmitAndWaitRequest <*>
                         HsJSONPB.asProxy declare_commands
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SubmitAndWaitRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commands", submitAndWaitRequestCommands),
                                                        ("trace_context",
                                                         submitAndWaitRequestTraceContext)]}})
 
data SubmitAndWaitForTransactionIdResponse = SubmitAndWaitForTransactionIdResponse{submitAndWaitForTransactionIdResponseTransactionId
                                                                                   :: Hs.Text}
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SubmitAndWaitForTransactionIdResponse
         where
        nameOf _ = (Hs.fromString "SubmitAndWaitForTransactionIdResponse")
 
instance HsProtobuf.HasDefault
         SubmitAndWaitForTransactionIdResponse
 
instance HsProtobuf.Message SubmitAndWaitForTransactionIdResponse
         where
        encodeMessage _
          SubmitAndWaitForTransactionIdResponse{submitAndWaitForTransactionIdResponseTransactionId
                                                  =
                                                  submitAndWaitForTransactionIdResponseTransactionId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   submitAndWaitForTransactionIdResponseTransactionId)])
        decodeMessage _
          = (Hs.pure SubmitAndWaitForTransactionIdResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "transaction_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SubmitAndWaitForTransactionIdResponse
         where
        toJSONPB (SubmitAndWaitForTransactionIdResponse f1)
          = (HsJSONPB.object ["transaction_id" .= f1])
        toEncodingPB (SubmitAndWaitForTransactionIdResponse f1)
          = (HsJSONPB.pairs ["transaction_id" .= f1])
 
instance HsJSONPB.FromJSONPB SubmitAndWaitForTransactionIdResponse
         where
        parseJSONPB
          = (HsJSONPB.withObject "SubmitAndWaitForTransactionIdResponse"
               (\ obj ->
                  (Hs.pure SubmitAndWaitForTransactionIdResponse) <*>
                    obj .: "transaction_id"))
 
instance HsJSONPB.ToJSON SubmitAndWaitForTransactionIdResponse
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SubmitAndWaitForTransactionIdResponse
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SubmitAndWaitForTransactionIdResponse
         where
        declareNamedSchema _
          = do let declare_transaction_id = HsJSONPB.declareSchemaRef
               submitAndWaitForTransactionIdResponseTransactionId <- declare_transaction_id
                                                                       Proxy.Proxy
               let _ = Hs.pure SubmitAndWaitForTransactionIdResponse <*>
                         HsJSONPB.asProxy declare_transaction_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SubmitAndWaitForTransactionIdResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction_id",
                                                         submitAndWaitForTransactionIdResponseTransactionId)]}})
 
data SubmitAndWaitForTransactionResponse = SubmitAndWaitForTransactionResponse{submitAndWaitForTransactionResponseTransaction
                                                                               ::
                                                                               Hs.Maybe
                                                                                 Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SubmitAndWaitForTransactionResponse where
        nameOf _ = (Hs.fromString "SubmitAndWaitForTransactionResponse")
 
instance HsProtobuf.HasDefault SubmitAndWaitForTransactionResponse
 
instance HsProtobuf.Message SubmitAndWaitForTransactionResponse
         where
        encodeMessage _
          SubmitAndWaitForTransactionResponse{submitAndWaitForTransactionResponseTransaction
                                                = submitAndWaitForTransactionResponseTransaction}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      submitAndWaitForTransactionResponseTransaction))])
        decodeMessage _
          = (Hs.pure SubmitAndWaitForTransactionResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Transaction")))
                (HsProtobuf.Single "transaction")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SubmitAndWaitForTransactionResponse
         where
        toJSONPB (SubmitAndWaitForTransactionResponse f1)
          = (HsJSONPB.object ["transaction" .= f1])
        toEncodingPB (SubmitAndWaitForTransactionResponse f1)
          = (HsJSONPB.pairs ["transaction" .= f1])
 
instance HsJSONPB.FromJSONPB SubmitAndWaitForTransactionResponse
         where
        parseJSONPB
          = (HsJSONPB.withObject "SubmitAndWaitForTransactionResponse"
               (\ obj ->
                  (Hs.pure SubmitAndWaitForTransactionResponse) <*>
                    obj .: "transaction"))
 
instance HsJSONPB.ToJSON SubmitAndWaitForTransactionResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SubmitAndWaitForTransactionResponse
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SubmitAndWaitForTransactionResponse
         where
        declareNamedSchema _
          = do let declare_transaction = HsJSONPB.declareSchemaRef
               submitAndWaitForTransactionResponseTransaction <- declare_transaction
                                                                   Proxy.Proxy
               let _ = Hs.pure SubmitAndWaitForTransactionResponse <*>
                         HsJSONPB.asProxy declare_transaction
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SubmitAndWaitForTransactionResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction",
                                                         submitAndWaitForTransactionResponseTransaction)]}})
 
data SubmitAndWaitForTransactionTreeResponse = SubmitAndWaitForTransactionTreeResponse{submitAndWaitForTransactionTreeResponseTransaction
                                                                                       ::
                                                                                       Hs.Maybe
                                                                                         Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree}
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named SubmitAndWaitForTransactionTreeResponse
         where
        nameOf _
          = (Hs.fromString "SubmitAndWaitForTransactionTreeResponse")
 
instance HsProtobuf.HasDefault
         SubmitAndWaitForTransactionTreeResponse
 
instance HsProtobuf.Message SubmitAndWaitForTransactionTreeResponse
         where
        encodeMessage _
          SubmitAndWaitForTransactionTreeResponse{submitAndWaitForTransactionTreeResponseTransaction
                                                    =
                                                    submitAndWaitForTransactionTreeResponseTransaction}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      submitAndWaitForTransactionTreeResponseTransaction))])
        decodeMessage _
          = (Hs.pure SubmitAndWaitForTransactionTreeResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TransactionTree")))
                (HsProtobuf.Single "transaction")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SubmitAndWaitForTransactionTreeResponse
         where
        toJSONPB (SubmitAndWaitForTransactionTreeResponse f1)
          = (HsJSONPB.object ["transaction" .= f1])
        toEncodingPB (SubmitAndWaitForTransactionTreeResponse f1)
          = (HsJSONPB.pairs ["transaction" .= f1])
 
instance HsJSONPB.FromJSONPB
         SubmitAndWaitForTransactionTreeResponse where
        parseJSONPB
          = (HsJSONPB.withObject "SubmitAndWaitForTransactionTreeResponse"
               (\ obj ->
                  (Hs.pure SubmitAndWaitForTransactionTreeResponse) <*>
                    obj .: "transaction"))
 
instance HsJSONPB.ToJSON SubmitAndWaitForTransactionTreeResponse
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SubmitAndWaitForTransactionTreeResponse
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SubmitAndWaitForTransactionTreeResponse
         where
        declareNamedSchema _
          = do let declare_transaction = HsJSONPB.declareSchemaRef
               submitAndWaitForTransactionTreeResponseTransaction <- declare_transaction
                                                                       Proxy.Proxy
               let _ = Hs.pure SubmitAndWaitForTransactionTreeResponse <*>
                         HsJSONPB.asProxy declare_transaction
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SubmitAndWaitForTransactionTreeResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction",
                                                         submitAndWaitForTransactionTreeResponseTransaction)]}})