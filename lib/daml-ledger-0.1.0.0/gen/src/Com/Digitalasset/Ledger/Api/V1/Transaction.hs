{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.Transaction where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Com.Digitalasset.Ledger.Api.V1.Event
import qualified Google.Protobuf.Timestamp
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
 
data TransactionTree = TransactionTree{transactionTreeTransactionId
                                       :: Hs.Text,
                                       transactionTreeCommandId :: Hs.Text,
                                       transactionTreeWorkflowId :: Hs.Text,
                                       transactionTreeEffectiveAt ::
                                       Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                                       transactionTreeOffset :: Hs.Text,
                                       transactionTreeEventsById ::
                                       Hs.Map Hs.Text
                                         (Hs.Maybe
                                            Com.Digitalasset.Ledger.Api.V1.Transaction.TreeEvent),
                                       transactionTreeRootEventIds :: Hs.Vector Hs.Text,
                                       transactionTreeTraceContext ::
                                       Hs.Maybe
                                         Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TransactionTree where
        nameOf _ = (Hs.fromString "TransactionTree")
 
instance HsProtobuf.HasDefault TransactionTree
 
instance HsProtobuf.Message TransactionTree where
        encodeMessage _
          TransactionTree{transactionTreeTransactionId =
                            transactionTreeTransactionId,
                          transactionTreeCommandId = transactionTreeCommandId,
                          transactionTreeWorkflowId = transactionTreeWorkflowId,
                          transactionTreeEffectiveAt = transactionTreeEffectiveAt,
                          transactionTreeOffset = transactionTreeOffset,
                          transactionTreeEventsById = transactionTreeEventsById,
                          transactionTreeRootEventIds = transactionTreeRootEventIds,
                          transactionTreeTraceContext = transactionTreeTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transactionTreeTransactionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   transactionTreeCommandId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   transactionTreeWorkflowId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      transactionTreeEffectiveAt)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   transactionTreeOffset),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   (Hs.unsafeCoerce
                      @(Hs.Map Hs.Text (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TreeEvent))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TreeEvent))
                      transactionTreeEventsById)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      transactionTreeRootEventIds)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      transactionTreeTraceContext))])
        decodeMessage _
          = (Hs.pure TransactionTree) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TreeEvent)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TreeEvent)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 7)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 8)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "transaction_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "command_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "workflow_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "effective_at")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "offset")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "TreeEvent")))
                (HsProtobuf.Single "events_by_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "root_event_ids")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TransactionTree where
        toJSONPB (TransactionTree f1 f2 f3 f4 f6 f7 f8 f1000)
          = (HsJSONPB.object
               ["transaction_id" .= f1, "command_id" .= f2, "workflow_id" .= f3,
                "effective_at" .= f4, "offset" .= f6, "events_by_id" .= f7,
                "root_event_ids" .= f8, "trace_context" .= f1000])
        toEncodingPB (TransactionTree f1 f2 f3 f4 f6 f7 f8 f1000)
          = (HsJSONPB.pairs
               ["transaction_id" .= f1, "command_id" .= f2, "workflow_id" .= f3,
                "effective_at" .= f4, "offset" .= f6, "events_by_id" .= f7,
                "root_event_ids" .= f8, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB TransactionTree where
        parseJSONPB
          = (HsJSONPB.withObject "TransactionTree"
               (\ obj ->
                  (Hs.pure TransactionTree) <*> obj .: "transaction_id" <*>
                    obj .: "command_id"
                    <*> obj .: "workflow_id"
                    <*> obj .: "effective_at"
                    <*> obj .: "offset"
                    <*> obj .: "events_by_id"
                    <*> obj .: "root_event_ids"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON TransactionTree where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TransactionTree where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TransactionTree where
        declareNamedSchema _
          = do let declare_transaction_id = HsJSONPB.declareSchemaRef
               transactionTreeTransactionId <- declare_transaction_id Proxy.Proxy
               let declare_command_id = HsJSONPB.declareSchemaRef
               transactionTreeCommandId <- declare_command_id Proxy.Proxy
               let declare_workflow_id = HsJSONPB.declareSchemaRef
               transactionTreeWorkflowId <- declare_workflow_id Proxy.Proxy
               let declare_effective_at = HsJSONPB.declareSchemaRef
               transactionTreeEffectiveAt <- declare_effective_at Proxy.Proxy
               let declare_offset = HsJSONPB.declareSchemaRef
               transactionTreeOffset <- declare_offset Proxy.Proxy
               let declare_events_by_id = HsJSONPB.declareSchemaRef
               transactionTreeEventsById <- declare_events_by_id Proxy.Proxy
               let declare_root_event_ids = HsJSONPB.declareSchemaRef
               transactionTreeRootEventIds <- declare_root_event_ids Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               transactionTreeTraceContext <- declare_trace_context Proxy.Proxy
               let _ = Hs.pure TransactionTree <*>
                         HsJSONPB.asProxy declare_transaction_id
                         <*> HsJSONPB.asProxy declare_command_id
                         <*> HsJSONPB.asProxy declare_workflow_id
                         <*> HsJSONPB.asProxy declare_effective_at
                         <*> HsJSONPB.asProxy declare_offset
                         <*> HsJSONPB.asProxy declare_events_by_id
                         <*> HsJSONPB.asProxy declare_root_event_ids
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TransactionTree",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction_id",
                                                         transactionTreeTransactionId),
                                                        ("command_id", transactionTreeCommandId),
                                                        ("workflow_id", transactionTreeWorkflowId),
                                                        ("effective_at",
                                                         transactionTreeEffectiveAt),
                                                        ("offset", transactionTreeOffset),
                                                        ("events_by_id", transactionTreeEventsById),
                                                        ("root_event_ids",
                                                         transactionTreeRootEventIds),
                                                        ("trace_context",
                                                         transactionTreeTraceContext)]}})
 
data TreeEvent = TreeEvent{treeEventKind :: Hs.Maybe TreeEventKind}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TreeEvent where
        nameOf _ = (Hs.fromString "TreeEvent")
 
instance HsProtobuf.HasDefault TreeEvent
 
instance HsProtobuf.Message TreeEvent where
        encodeMessage _ TreeEvent{treeEventKind = treeEventKind}
          = (Hs.mconcat
               [case treeEventKind of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TreeEventKindCreated y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent)
                                        (Hs.Just y)))
                             TreeEventKindExercised y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Event.ExercisedEvent)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Event.ExercisedEvent)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure TreeEvent) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap TreeEventKindCreated)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap TreeEventKindExercised)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Event.ExercisedEvent))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Event.ExercisedEvent))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB TreeEvent where
        toJSONPB (TreeEvent f1_or_f2)
          = (HsJSONPB.object
               [(let encodeKind
                       = (case f1_or_f2 of
                              Hs.Just (TreeEventKindCreated f1) -> (HsJSONPB.pair "created" f1)
                              Hs.Just (TreeEventKindExercised f2)
                                -> (HsJSONPB.pair "exercised" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("kind" .= (HsJSONPB.objectOrNull [encodeKind] options)) options
                       else encodeKind options)])
        toEncodingPB (TreeEvent f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeKind
                       = (case f1_or_f2 of
                              Hs.Just (TreeEventKindCreated f1) -> (HsJSONPB.pair "created" f1)
                              Hs.Just (TreeEventKindExercised f2)
                                -> (HsJSONPB.pair "exercised" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("kind" .= (HsJSONPB.pairsOrNull [encodeKind] options)) options
                       else encodeKind options)])
 
instance HsJSONPB.FromJSONPB TreeEvent where
        parseJSONPB
          = (HsJSONPB.withObject "TreeEvent"
               (\ obj ->
                  (Hs.pure TreeEvent) <*>
                    (let parseKind parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TreeEventKindCreated <$>
                                  (HsJSONPB.parseField parseObj "created"),
                                Hs.Just Hs.. TreeEventKindExercised <$>
                                  (HsJSONPB.parseField parseObj "exercised"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "kind") Hs.>>= (HsJSONPB.withObject "kind" parseKind)) <|>
                         (parseKind obj))))
 
instance HsJSONPB.ToJSON TreeEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TreeEvent where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TreeEvent where
        declareNamedSchema _
          = do let declare_kind = HsJSONPB.declareSchemaRef
               treeEventKind <- declare_kind Proxy.Proxy
               let _ = Hs.pure TreeEvent <*> HsJSONPB.asProxy declare_kind
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TreeEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("kind", treeEventKind)]}})
 
data TreeEventKind = TreeEventKindCreated Com.Digitalasset.Ledger.Api.V1.Event.CreatedEvent
                   | TreeEventKindExercised Com.Digitalasset.Ledger.Api.V1.Event.ExercisedEvent
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TreeEventKind where
        nameOf _ = (Hs.fromString "TreeEventKind")
 
instance HsJSONPB.ToSchema TreeEventKind where
        declareNamedSchema _
          = do let declare_created = HsJSONPB.declareSchemaRef
               treeEventKindCreated <- declare_created Proxy.Proxy
               let _ = Hs.pure TreeEventKindCreated <*>
                         HsJSONPB.asProxy declare_created
               let declare_exercised = HsJSONPB.declareSchemaRef
               treeEventKindExercised <- declare_exercised Proxy.Proxy
               let _ = Hs.pure TreeEventKindExercised <*>
                         HsJSONPB.asProxy declare_exercised
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TreeEventKind",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("created", treeEventKindCreated),
                                                        ("exercised", treeEventKindExercised)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Transaction = Transaction{transactionTransactionId :: Hs.Text,
                               transactionCommandId :: Hs.Text, transactionWorkflowId :: Hs.Text,
                               transactionEffectiveAt ::
                               Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                               transactionEvents ::
                               Hs.Vector Com.Digitalasset.Ledger.Api.V1.Event.Event,
                               transactionOffset :: Hs.Text,
                               transactionTraceContext ::
                               Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction where
        nameOf _ = (Hs.fromString "Transaction")
 
instance HsProtobuf.HasDefault Transaction
 
instance HsProtobuf.Message Transaction where
        encodeMessage _
          Transaction{transactionTransactionId = transactionTransactionId,
                      transactionCommandId = transactionCommandId,
                      transactionWorkflowId = transactionWorkflowId,
                      transactionEffectiveAt = transactionEffectiveAt,
                      transactionEvents = transactionEvents,
                      transactionOffset = transactionOffset,
                      transactionTraceContext = transactionTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transactionTransactionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   transactionCommandId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   transactionWorkflowId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      transactionEffectiveAt)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Event.Event)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Event.Event)
                      transactionEvents)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   transactionOffset),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      transactionTraceContext))])
        decodeMessage _
          = (Hs.pure Transaction) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Event.Event))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Event.Event))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "transaction_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "command_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "workflow_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "effective_at")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Event")))
                (HsProtobuf.Single "events")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "offset")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction where
        toJSONPB (Transaction f1 f2 f3 f4 f5 f6 f1000)
          = (HsJSONPB.object
               ["transaction_id" .= f1, "command_id" .= f2, "workflow_id" .= f3,
                "effective_at" .= f4, "events" .= f5, "offset" .= f6,
                "trace_context" .= f1000])
        toEncodingPB (Transaction f1 f2 f3 f4 f5 f6 f1000)
          = (HsJSONPB.pairs
               ["transaction_id" .= f1, "command_id" .= f2, "workflow_id" .= f3,
                "effective_at" .= f4, "events" .= f5, "offset" .= f6,
                "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB Transaction where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction"
               (\ obj ->
                  (Hs.pure Transaction) <*> obj .: "transaction_id" <*>
                    obj .: "command_id"
                    <*> obj .: "workflow_id"
                    <*> obj .: "effective_at"
                    <*> obj .: "events"
                    <*> obj .: "offset"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON Transaction where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction where
        declareNamedSchema _
          = do let declare_transaction_id = HsJSONPB.declareSchemaRef
               transactionTransactionId <- declare_transaction_id Proxy.Proxy
               let declare_command_id = HsJSONPB.declareSchemaRef
               transactionCommandId <- declare_command_id Proxy.Proxy
               let declare_workflow_id = HsJSONPB.declareSchemaRef
               transactionWorkflowId <- declare_workflow_id Proxy.Proxy
               let declare_effective_at = HsJSONPB.declareSchemaRef
               transactionEffectiveAt <- declare_effective_at Proxy.Proxy
               let declare_events = HsJSONPB.declareSchemaRef
               transactionEvents <- declare_events Proxy.Proxy
               let declare_offset = HsJSONPB.declareSchemaRef
               transactionOffset <- declare_offset Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               transactionTraceContext <- declare_trace_context Proxy.Proxy
               let _ = Hs.pure Transaction <*>
                         HsJSONPB.asProxy declare_transaction_id
                         <*> HsJSONPB.asProxy declare_command_id
                         <*> HsJSONPB.asProxy declare_workflow_id
                         <*> HsJSONPB.asProxy declare_effective_at
                         <*> HsJSONPB.asProxy declare_events
                         <*> HsJSONPB.asProxy declare_offset
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction_id",
                                                         transactionTransactionId),
                                                        ("command_id", transactionCommandId),
                                                        ("workflow_id", transactionWorkflowId),
                                                        ("effective_at", transactionEffectiveAt),
                                                        ("events", transactionEvents),
                                                        ("offset", transactionOffset),
                                                        ("trace_context",
                                                         transactionTraceContext)]}})