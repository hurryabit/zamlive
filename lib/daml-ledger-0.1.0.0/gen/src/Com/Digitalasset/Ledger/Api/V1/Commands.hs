{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.Commands where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Com.Digitalasset.Ledger.Api.V1.Value
import qualified Google.Protobuf.Timestamp
 
data Commands = Commands{commandsLedgerId :: Hs.Text,
                         commandsWorkflowId :: Hs.Text, commandsApplicationId :: Hs.Text,
                         commandsCommandId :: Hs.Text, commandsParty :: Hs.Text,
                         commandsLedgerEffectiveTime ::
                         Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                         commandsMaximumRecordTime ::
                         Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                         commandsCommands ::
                         Hs.Vector Com.Digitalasset.Ledger.Api.V1.Commands.Command}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Commands where
        nameOf _ = (Hs.fromString "Commands")
 
instance HsProtobuf.HasDefault Commands
 
instance HsProtobuf.Message Commands where
        encodeMessage _
          Commands{commandsLedgerId = commandsLedgerId,
                   commandsWorkflowId = commandsWorkflowId,
                   commandsApplicationId = commandsApplicationId,
                   commandsCommandId = commandsCommandId,
                   commandsParty = commandsParty,
                   commandsLedgerEffectiveTime = commandsLedgerEffectiveTime,
                   commandsMaximumRecordTime = commandsMaximumRecordTime,
                   commandsCommands = commandsCommands}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   commandsLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   commandsWorkflowId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   commandsApplicationId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   commandsCommandId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   commandsParty),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      commandsLedgerEffectiveTime)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      commandsMaximumRecordTime)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Commands.Command)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Commands.Command)
                      commandsCommands))])
        decodeMessage _
          = (Hs.pure Commands) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 6)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 7)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Commands.Command))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Commands.Command))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 8)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "workflow_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "application_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "command_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "party")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "ledger_effective_time")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "maximum_record_time")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Command")))
                (HsProtobuf.Single "commands")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Commands where
        toJSONPB (Commands f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "workflow_id" .= f2, "application_id" .= f3,
                "command_id" .= f4, "party" .= f5, "ledger_effective_time" .= f6,
                "maximum_record_time" .= f7, "commands" .= f8])
        toEncodingPB (Commands f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "workflow_id" .= f2, "application_id" .= f3,
                "command_id" .= f4, "party" .= f5, "ledger_effective_time" .= f6,
                "maximum_record_time" .= f7, "commands" .= f8])
 
instance HsJSONPB.FromJSONPB Commands where
        parseJSONPB
          = (HsJSONPB.withObject "Commands"
               (\ obj ->
                  (Hs.pure Commands) <*> obj .: "ledger_id" <*> obj .: "workflow_id"
                    <*> obj .: "application_id"
                    <*> obj .: "command_id"
                    <*> obj .: "party"
                    <*> obj .: "ledger_effective_time"
                    <*> obj .: "maximum_record_time"
                    <*> obj .: "commands"))
 
instance HsJSONPB.ToJSON Commands where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Commands where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Commands where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               commandsLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_workflow_id = HsJSONPB.declareSchemaRef
               commandsWorkflowId <- declare_workflow_id Proxy.Proxy
               let declare_application_id = HsJSONPB.declareSchemaRef
               commandsApplicationId <- declare_application_id Proxy.Proxy
               let declare_command_id = HsJSONPB.declareSchemaRef
               commandsCommandId <- declare_command_id Proxy.Proxy
               let declare_party = HsJSONPB.declareSchemaRef
               commandsParty <- declare_party Proxy.Proxy
               let declare_ledger_effective_time = HsJSONPB.declareSchemaRef
               commandsLedgerEffectiveTime <- declare_ledger_effective_time
                                                Proxy.Proxy
               let declare_maximum_record_time = HsJSONPB.declareSchemaRef
               commandsMaximumRecordTime <- declare_maximum_record_time
                                              Proxy.Proxy
               let declare_commands = HsJSONPB.declareSchemaRef
               commandsCommands <- declare_commands Proxy.Proxy
               let _ = Hs.pure Commands <*> HsJSONPB.asProxy declare_ledger_id <*>
                         HsJSONPB.asProxy declare_workflow_id
                         <*> HsJSONPB.asProxy declare_application_id
                         <*> HsJSONPB.asProxy declare_command_id
                         <*> HsJSONPB.asProxy declare_party
                         <*> HsJSONPB.asProxy declare_ledger_effective_time
                         <*> HsJSONPB.asProxy declare_maximum_record_time
                         <*> HsJSONPB.asProxy declare_commands
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Commands",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id", commandsLedgerId),
                                                        ("workflow_id", commandsWorkflowId),
                                                        ("application_id", commandsApplicationId),
                                                        ("command_id", commandsCommandId),
                                                        ("party", commandsParty),
                                                        ("ledger_effective_time",
                                                         commandsLedgerEffectiveTime),
                                                        ("maximum_record_time",
                                                         commandsMaximumRecordTime),
                                                        ("commands", commandsCommands)]}})
 
data Command = Command{commandCommand :: Hs.Maybe CommandCommand}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Command where
        nameOf _ = (Hs.fromString "Command")
 
instance HsProtobuf.HasDefault Command
 
instance HsProtobuf.Message Command where
        encodeMessage _ Command{commandCommand = commandCommand}
          = (Hs.mconcat
               [case commandCommand of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CommandCommandCreate y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.CreateCommand)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.CreateCommand)
                                        (Hs.Just y)))
                             CommandCommandExercise y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseCommand)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseCommand)
                                        (Hs.Just y)))
                             CommandCommandExerciseByKey y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseByKeyCommand)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseByKeyCommand)
                                        (Hs.Just y)))
                             CommandCommandCreateAndExercise y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.CreateAndExerciseCommand)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.CreateAndExerciseCommand)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Command) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap CommandCommandCreate)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.CreateCommand))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.CreateCommand))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap CommandCommandExercise)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseCommand))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseCommand))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap CommandCommandExerciseByKey)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseByKeyCommand))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseByKeyCommand))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap CommandCommandCreateAndExercise)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Commands.CreateAndExerciseCommand))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Commands.CreateAndExerciseCommand))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Command where
        toJSONPB (Command f1_or_f2_or_f4_or_f3)
          = (HsJSONPB.object
               [(let encodeCommand
                       = (case f1_or_f2_or_f4_or_f3 of
                              Hs.Just (CommandCommandCreate f1) -> (HsJSONPB.pair "create" f1)
                              Hs.Just (CommandCommandExercise f2)
                                -> (HsJSONPB.pair "exercise" f2)
                              Hs.Just (CommandCommandExerciseByKey f4)
                                -> (HsJSONPB.pair "exerciseByKey" f4)
                              Hs.Just (CommandCommandCreateAndExercise f3)
                                -> (HsJSONPB.pair "createAndExercise" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("command" .= (HsJSONPB.objectOrNull [encodeCommand] options))
                         options
                       else encodeCommand options)])
        toEncodingPB (Command f1_or_f2_or_f4_or_f3)
          = (HsJSONPB.pairs
               [(let encodeCommand
                       = (case f1_or_f2_or_f4_or_f3 of
                              Hs.Just (CommandCommandCreate f1) -> (HsJSONPB.pair "create" f1)
                              Hs.Just (CommandCommandExercise f2)
                                -> (HsJSONPB.pair "exercise" f2)
                              Hs.Just (CommandCommandExerciseByKey f4)
                                -> (HsJSONPB.pair "exerciseByKey" f4)
                              Hs.Just (CommandCommandCreateAndExercise f3)
                                -> (HsJSONPB.pair "createAndExercise" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("command" .= (HsJSONPB.pairsOrNull [encodeCommand] options))
                         options
                       else encodeCommand options)])
 
instance HsJSONPB.FromJSONPB Command where
        parseJSONPB
          = (HsJSONPB.withObject "Command"
               (\ obj ->
                  (Hs.pure Command) <*>
                    (let parseCommand parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CommandCommandCreate <$>
                                  (HsJSONPB.parseField parseObj "create"),
                                Hs.Just Hs.. CommandCommandExercise <$>
                                  (HsJSONPB.parseField parseObj "exercise"),
                                Hs.Just Hs.. CommandCommandExerciseByKey <$>
                                  (HsJSONPB.parseField parseObj "exerciseByKey"),
                                Hs.Just Hs.. CommandCommandCreateAndExercise <$>
                                  (HsJSONPB.parseField parseObj "createAndExercise"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "command") Hs.>>=
                          (HsJSONPB.withObject "command" parseCommand))
                         <|> (parseCommand obj))))
 
instance HsJSONPB.ToJSON Command where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Command where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Command where
        declareNamedSchema _
          = do let declare_command = HsJSONPB.declareSchemaRef
               commandCommand <- declare_command Proxy.Proxy
               let _ = Hs.pure Command <*> HsJSONPB.asProxy declare_command
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Command",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("command", commandCommand)]}})
 
data CommandCommand = CommandCommandCreate Com.Digitalasset.Ledger.Api.V1.Commands.CreateCommand
                    | CommandCommandExercise Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseCommand
                    | CommandCommandExerciseByKey Com.Digitalasset.Ledger.Api.V1.Commands.ExerciseByKeyCommand
                    | CommandCommandCreateAndExercise Com.Digitalasset.Ledger.Api.V1.Commands.CreateAndExerciseCommand
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CommandCommand where
        nameOf _ = (Hs.fromString "CommandCommand")
 
instance HsJSONPB.ToSchema CommandCommand where
        declareNamedSchema _
          = do let declare_create = HsJSONPB.declareSchemaRef
               commandCommandCreate <- declare_create Proxy.Proxy
               let _ = Hs.pure CommandCommandCreate <*>
                         HsJSONPB.asProxy declare_create
               let declare_exercise = HsJSONPB.declareSchemaRef
               commandCommandExercise <- declare_exercise Proxy.Proxy
               let _ = Hs.pure CommandCommandExercise <*>
                         HsJSONPB.asProxy declare_exercise
               let declare_exerciseByKey = HsJSONPB.declareSchemaRef
               commandCommandExerciseByKey <- declare_exerciseByKey Proxy.Proxy
               let _ = Hs.pure CommandCommandExerciseByKey <*>
                         HsJSONPB.asProxy declare_exerciseByKey
               let declare_createAndExercise = HsJSONPB.declareSchemaRef
               commandCommandCreateAndExercise <- declare_createAndExercise
                                                    Proxy.Proxy
               let _ = Hs.pure CommandCommandCreateAndExercise <*>
                         HsJSONPB.asProxy declare_createAndExercise
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CommandCommand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("create", commandCommandCreate),
                                                        ("exercise", commandCommandExercise),
                                                        ("exerciseByKey",
                                                         commandCommandExerciseByKey),
                                                        ("createAndExercise",
                                                         commandCommandCreateAndExercise)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CreateCommand = CreateCommand{createCommandTemplateId ::
                                   Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                                   createCommandCreateArguments ::
                                   Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CreateCommand where
        nameOf _ = (Hs.fromString "CreateCommand")
 
instance HsProtobuf.HasDefault CreateCommand
 
instance HsProtobuf.Message CreateCommand where
        encodeMessage _
          CreateCommand{createCommandTemplateId = createCommandTemplateId,
                        createCommandCreateArguments = createCommandCreateArguments}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      createCommandTemplateId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record)
                      createCommandCreateArguments))])
        decodeMessage _
          = (Hs.pure CreateCommand) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "template_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Record")))
                (HsProtobuf.Single "create_arguments")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CreateCommand where
        toJSONPB (CreateCommand f1 f2)
          = (HsJSONPB.object ["template_id" .= f1, "create_arguments" .= f2])
        toEncodingPB (CreateCommand f1 f2)
          = (HsJSONPB.pairs ["template_id" .= f1, "create_arguments" .= f2])
 
instance HsJSONPB.FromJSONPB CreateCommand where
        parseJSONPB
          = (HsJSONPB.withObject "CreateCommand"
               (\ obj ->
                  (Hs.pure CreateCommand) <*> obj .: "template_id" <*>
                    obj .: "create_arguments"))
 
instance HsJSONPB.ToJSON CreateCommand where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CreateCommand where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CreateCommand where
        declareNamedSchema _
          = do let declare_template_id = HsJSONPB.declareSchemaRef
               createCommandTemplateId <- declare_template_id Proxy.Proxy
               let declare_create_arguments = HsJSONPB.declareSchemaRef
               createCommandCreateArguments <- declare_create_arguments
                                                 Proxy.Proxy
               let _ = Hs.pure CreateCommand <*>
                         HsJSONPB.asProxy declare_template_id
                         <*> HsJSONPB.asProxy declare_create_arguments
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CreateCommand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("template_id", createCommandTemplateId),
                                                        ("create_arguments",
                                                         createCommandCreateArguments)]}})
 
data ExerciseCommand = ExerciseCommand{exerciseCommandTemplateId ::
                                       Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                                       exerciseCommandContractId :: Hs.Text,
                                       exerciseCommandChoice :: Hs.Text,
                                       exerciseCommandChoiceArgument ::
                                       Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ExerciseCommand where
        nameOf _ = (Hs.fromString "ExerciseCommand")
 
instance HsProtobuf.HasDefault ExerciseCommand
 
instance HsProtobuf.Message ExerciseCommand where
        encodeMessage _
          ExerciseCommand{exerciseCommandTemplateId =
                            exerciseCommandTemplateId,
                          exerciseCommandContractId = exerciseCommandContractId,
                          exerciseCommandChoice = exerciseCommandChoice,
                          exerciseCommandChoiceArgument = exerciseCommandChoiceArgument}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      exerciseCommandTemplateId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   exerciseCommandContractId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   exerciseCommandChoice),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      exerciseCommandChoiceArgument))])
        decodeMessage _
          = (Hs.pure ExerciseCommand) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "template_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "contract_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "choice")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "choice_argument")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ExerciseCommand where
        toJSONPB (ExerciseCommand f1 f2 f3 f4)
          = (HsJSONPB.object
               ["template_id" .= f1, "contract_id" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
        toEncodingPB (ExerciseCommand f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["template_id" .= f1, "contract_id" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
 
instance HsJSONPB.FromJSONPB ExerciseCommand where
        parseJSONPB
          = (HsJSONPB.withObject "ExerciseCommand"
               (\ obj ->
                  (Hs.pure ExerciseCommand) <*> obj .: "template_id" <*>
                    obj .: "contract_id"
                    <*> obj .: "choice"
                    <*> obj .: "choice_argument"))
 
instance HsJSONPB.ToJSON ExerciseCommand where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExerciseCommand where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ExerciseCommand where
        declareNamedSchema _
          = do let declare_template_id = HsJSONPB.declareSchemaRef
               exerciseCommandTemplateId <- declare_template_id Proxy.Proxy
               let declare_contract_id = HsJSONPB.declareSchemaRef
               exerciseCommandContractId <- declare_contract_id Proxy.Proxy
               let declare_choice = HsJSONPB.declareSchemaRef
               exerciseCommandChoice <- declare_choice Proxy.Proxy
               let declare_choice_argument = HsJSONPB.declareSchemaRef
               exerciseCommandChoiceArgument <- declare_choice_argument
                                                  Proxy.Proxy
               let _ = Hs.pure ExerciseCommand <*>
                         HsJSONPB.asProxy declare_template_id
                         <*> HsJSONPB.asProxy declare_contract_id
                         <*> HsJSONPB.asProxy declare_choice
                         <*> HsJSONPB.asProxy declare_choice_argument
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ExerciseCommand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("template_id", exerciseCommandTemplateId),
                                                        ("contract_id", exerciseCommandContractId),
                                                        ("choice", exerciseCommandChoice),
                                                        ("choice_argument",
                                                         exerciseCommandChoiceArgument)]}})
 
data ExerciseByKeyCommand = ExerciseByKeyCommand{exerciseByKeyCommandTemplateId
                                                 ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                                                 exerciseByKeyCommandContractKey ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.Value.Value,
                                                 exerciseByKeyCommandChoice :: Hs.Text,
                                                 exerciseByKeyCommandChoiceArgument ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.Value.Value}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ExerciseByKeyCommand where
        nameOf _ = (Hs.fromString "ExerciseByKeyCommand")
 
instance HsProtobuf.HasDefault ExerciseByKeyCommand
 
instance HsProtobuf.Message ExerciseByKeyCommand where
        encodeMessage _
          ExerciseByKeyCommand{exerciseByKeyCommandTemplateId =
                                 exerciseByKeyCommandTemplateId,
                               exerciseByKeyCommandContractKey = exerciseByKeyCommandContractKey,
                               exerciseByKeyCommandChoice = exerciseByKeyCommandChoice,
                               exerciseByKeyCommandChoiceArgument =
                                 exerciseByKeyCommandChoiceArgument}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      exerciseByKeyCommandTemplateId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      exerciseByKeyCommandContractKey)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   exerciseByKeyCommandChoice),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      exerciseByKeyCommandChoiceArgument))])
        decodeMessage _
          = (Hs.pure ExerciseByKeyCommand) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "template_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "contract_key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "choice")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "choice_argument")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ExerciseByKeyCommand where
        toJSONPB (ExerciseByKeyCommand f1 f2 f3 f4)
          = (HsJSONPB.object
               ["template_id" .= f1, "contract_key" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
        toEncodingPB (ExerciseByKeyCommand f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["template_id" .= f1, "contract_key" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
 
instance HsJSONPB.FromJSONPB ExerciseByKeyCommand where
        parseJSONPB
          = (HsJSONPB.withObject "ExerciseByKeyCommand"
               (\ obj ->
                  (Hs.pure ExerciseByKeyCommand) <*> obj .: "template_id" <*>
                    obj .: "contract_key"
                    <*> obj .: "choice"
                    <*> obj .: "choice_argument"))
 
instance HsJSONPB.ToJSON ExerciseByKeyCommand where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExerciseByKeyCommand where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ExerciseByKeyCommand where
        declareNamedSchema _
          = do let declare_template_id = HsJSONPB.declareSchemaRef
               exerciseByKeyCommandTemplateId <- declare_template_id Proxy.Proxy
               let declare_contract_key = HsJSONPB.declareSchemaRef
               exerciseByKeyCommandContractKey <- declare_contract_key Proxy.Proxy
               let declare_choice = HsJSONPB.declareSchemaRef
               exerciseByKeyCommandChoice <- declare_choice Proxy.Proxy
               let declare_choice_argument = HsJSONPB.declareSchemaRef
               exerciseByKeyCommandChoiceArgument <- declare_choice_argument
                                                       Proxy.Proxy
               let _ = Hs.pure ExerciseByKeyCommand <*>
                         HsJSONPB.asProxy declare_template_id
                         <*> HsJSONPB.asProxy declare_contract_key
                         <*> HsJSONPB.asProxy declare_choice
                         <*> HsJSONPB.asProxy declare_choice_argument
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ExerciseByKeyCommand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("template_id",
                                                         exerciseByKeyCommandTemplateId),
                                                        ("contract_key",
                                                         exerciseByKeyCommandContractKey),
                                                        ("choice", exerciseByKeyCommandChoice),
                                                        ("choice_argument",
                                                         exerciseByKeyCommandChoiceArgument)]}})
 
data CreateAndExerciseCommand = CreateAndExerciseCommand{createAndExerciseCommandTemplateId
                                                         ::
                                                         Hs.Maybe
                                                           Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                                                         createAndExerciseCommandCreateArguments ::
                                                         Hs.Maybe
                                                           Com.Digitalasset.Ledger.Api.V1.Value.Record,
                                                         createAndExerciseCommandChoice :: Hs.Text,
                                                         createAndExerciseCommandChoiceArgument ::
                                                         Hs.Maybe
                                                           Com.Digitalasset.Ledger.Api.V1.Value.Value}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CreateAndExerciseCommand where
        nameOf _ = (Hs.fromString "CreateAndExerciseCommand")
 
instance HsProtobuf.HasDefault CreateAndExerciseCommand
 
instance HsProtobuf.Message CreateAndExerciseCommand where
        encodeMessage _
          CreateAndExerciseCommand{createAndExerciseCommandTemplateId =
                                     createAndExerciseCommandTemplateId,
                                   createAndExerciseCommandCreateArguments =
                                     createAndExerciseCommandCreateArguments,
                                   createAndExerciseCommandChoice = createAndExerciseCommandChoice,
                                   createAndExerciseCommandChoiceArgument =
                                     createAndExerciseCommandChoiceArgument}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      createAndExerciseCommandTemplateId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record)
                      createAndExerciseCommandCreateArguments)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   createAndExerciseCommandChoice),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      createAndExerciseCommandChoiceArgument))])
        decodeMessage _
          = (Hs.pure CreateAndExerciseCommand) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "template_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Record")))
                (HsProtobuf.Single "create_arguments")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "choice")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "choice_argument")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CreateAndExerciseCommand where
        toJSONPB (CreateAndExerciseCommand f1 f2 f3 f4)
          = (HsJSONPB.object
               ["template_id" .= f1, "create_arguments" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
        toEncodingPB (CreateAndExerciseCommand f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["template_id" .= f1, "create_arguments" .= f2, "choice" .= f3,
                "choice_argument" .= f4])
 
instance HsJSONPB.FromJSONPB CreateAndExerciseCommand where
        parseJSONPB
          = (HsJSONPB.withObject "CreateAndExerciseCommand"
               (\ obj ->
                  (Hs.pure CreateAndExerciseCommand) <*> obj .: "template_id" <*>
                    obj .: "create_arguments"
                    <*> obj .: "choice"
                    <*> obj .: "choice_argument"))
 
instance HsJSONPB.ToJSON CreateAndExerciseCommand where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CreateAndExerciseCommand where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CreateAndExerciseCommand where
        declareNamedSchema _
          = do let declare_template_id = HsJSONPB.declareSchemaRef
               createAndExerciseCommandTemplateId <- declare_template_id
                                                       Proxy.Proxy
               let declare_create_arguments = HsJSONPB.declareSchemaRef
               createAndExerciseCommandCreateArguments <- declare_create_arguments
                                                            Proxy.Proxy
               let declare_choice = HsJSONPB.declareSchemaRef
               createAndExerciseCommandChoice <- declare_choice Proxy.Proxy
               let declare_choice_argument = HsJSONPB.declareSchemaRef
               createAndExerciseCommandChoiceArgument <- declare_choice_argument
                                                           Proxy.Proxy
               let _ = Hs.pure CreateAndExerciseCommand <*>
                         HsJSONPB.asProxy declare_template_id
                         <*> HsJSONPB.asProxy declare_create_arguments
                         <*> HsJSONPB.asProxy declare_choice
                         <*> HsJSONPB.asProxy declare_choice_argument
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CreateAndExerciseCommand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("template_id",
                                                         createAndExerciseCommandTemplateId),
                                                        ("create_arguments",
                                                         createAndExerciseCommandCreateArguments),
                                                        ("choice", createAndExerciseCommandChoice),
                                                        ("choice_argument",
                                                         createAndExerciseCommandChoiceArgument)]}})