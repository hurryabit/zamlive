{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.Completion where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Google.Rpc.Status
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
 
data Completion = Completion{completionCommandId :: Hs.Text,
                             completionStatus :: Hs.Maybe Google.Rpc.Status.Status,
                             completionTransactionId :: Hs.Text,
                             completionTraceContext ::
                             Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Completion where
        nameOf _ = (Hs.fromString "Completion")
 
instance HsProtobuf.HasDefault Completion
 
instance HsProtobuf.Message Completion where
        encodeMessage _
          Completion{completionCommandId = completionCommandId,
                     completionStatus = completionStatus,
                     completionTransactionId = completionTransactionId,
                     completionTraceContext = completionTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   completionCommandId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Google.Rpc.Status.Status)
                      @(HsProtobuf.Nested Google.Rpc.Status.Status)
                      completionStatus)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   completionTransactionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      completionTraceContext))])
        decodeMessage _
          = (Hs.pure Completion) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Google.Rpc.Status.Status))
                 @(_ (Hs.Maybe Google.Rpc.Status.Status))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "command_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["rpc", "Status"])))))
                (HsProtobuf.Single "status")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "transaction_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Completion where
        toJSONPB (Completion f1 f2 f3 f1000)
          = (HsJSONPB.object
               ["command_id" .= f1, "status" .= f2, "transaction_id" .= f3,
                "trace_context" .= f1000])
        toEncodingPB (Completion f1 f2 f3 f1000)
          = (HsJSONPB.pairs
               ["command_id" .= f1, "status" .= f2, "transaction_id" .= f3,
                "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB Completion where
        parseJSONPB
          = (HsJSONPB.withObject "Completion"
               (\ obj ->
                  (Hs.pure Completion) <*> obj .: "command_id" <*> obj .: "status"
                    <*> obj .: "transaction_id"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON Completion where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Completion where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Completion where
        declareNamedSchema _
          = do let declare_command_id = HsJSONPB.declareSchemaRef
               completionCommandId <- declare_command_id Proxy.Proxy
               let declare_status = HsJSONPB.declareSchemaRef
               completionStatus <- declare_status Proxy.Proxy
               let declare_transaction_id = HsJSONPB.declareSchemaRef
               completionTransactionId <- declare_transaction_id Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               completionTraceContext <- declare_trace_context Proxy.Proxy
               let _ = Hs.pure Completion <*> HsJSONPB.asProxy declare_command_id
                         <*> HsJSONPB.asProxy declare_status
                         <*> HsJSONPB.asProxy declare_transaction_id
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Completion",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("command_id", completionCommandId),
                                                        ("status", completionStatus),
                                                        ("transaction_id", completionTransactionId),
                                                        ("trace_context",
                                                         completionTraceContext)]}})