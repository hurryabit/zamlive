{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.LedgerIdentityService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
 
data LedgerIdentityService request
     response = LedgerIdentityService{ledgerIdentityServiceGetLedgerIdentity
                                      ::
                                      request 'HsGRPC.Normal
                                        Com.Digitalasset.Ledger.Api.V1.LedgerIdentityService.GetLedgerIdentityRequest
                                        Com.Digitalasset.Ledger.Api.V1.LedgerIdentityService.GetLedgerIdentityResponse
                                        ->
                                        Hs.IO
                                          (response 'HsGRPC.Normal
                                             Com.Digitalasset.Ledger.Api.V1.LedgerIdentityService.GetLedgerIdentityResponse)}
              deriving Hs.Generic
 
ledgerIdentityServiceServer ::
                              LedgerIdentityService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                                HsGRPC.ServiceOptions -> Hs.IO ()
ledgerIdentityServiceServer
  LedgerIdentityService{ledgerIdentityServiceGetLedgerIdentity =
                          ledgerIdentityServiceGetLedgerIdentity}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.LedgerIdentityService/GetLedgerIdentity")
                                   (HsGRPC.convertGeneratedServerHandler
                                      ledgerIdentityServiceGetLedgerIdentity))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
ledgerIdentityServiceClient ::
                              HsGRPC.Client ->
                                Hs.IO
                                  (LedgerIdentityService HsGRPC.ClientRequest HsGRPC.ClientResult)
ledgerIdentityServiceClient client
  = (Hs.pure LedgerIdentityService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.LedgerIdentityService/GetLedgerIdentity")))
 
data GetLedgerIdentityRequest = GetLedgerIdentityRequest{getLedgerIdentityRequestTraceContext
                                                         ::
                                                         Hs.Maybe
                                                           Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetLedgerIdentityRequest where
        nameOf _ = (Hs.fromString "GetLedgerIdentityRequest")
 
instance HsProtobuf.HasDefault GetLedgerIdentityRequest
 
instance HsProtobuf.Message GetLedgerIdentityRequest where
        encodeMessage _
          GetLedgerIdentityRequest{getLedgerIdentityRequestTraceContext =
                                     getLedgerIdentityRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getLedgerIdentityRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetLedgerIdentityRequest) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetLedgerIdentityRequest where
        toJSONPB (GetLedgerIdentityRequest f1000)
          = (HsJSONPB.object ["trace_context" .= f1000])
        toEncodingPB (GetLedgerIdentityRequest f1000)
          = (HsJSONPB.pairs ["trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetLedgerIdentityRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetLedgerIdentityRequest"
               (\ obj ->
                  (Hs.pure GetLedgerIdentityRequest) <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetLedgerIdentityRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetLedgerIdentityRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetLedgerIdentityRequest where
        declareNamedSchema _
          = do let declare_trace_context = HsJSONPB.declareSchemaRef
               getLedgerIdentityRequestTraceContext <- declare_trace_context
                                                         Proxy.Proxy
               let _ = Hs.pure GetLedgerIdentityRequest <*>
                         HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetLedgerIdentityRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("trace_context",
                                                         getLedgerIdentityRequestTraceContext)]}})
 
data GetLedgerIdentityResponse = GetLedgerIdentityResponse{getLedgerIdentityResponseLedgerId
                                                           :: Hs.Text}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetLedgerIdentityResponse where
        nameOf _ = (Hs.fromString "GetLedgerIdentityResponse")
 
instance HsProtobuf.HasDefault GetLedgerIdentityResponse
 
instance HsProtobuf.Message GetLedgerIdentityResponse where
        encodeMessage _
          GetLedgerIdentityResponse{getLedgerIdentityResponseLedgerId =
                                      getLedgerIdentityResponseLedgerId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getLedgerIdentityResponseLedgerId)])
        decodeMessage _
          = (Hs.pure GetLedgerIdentityResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetLedgerIdentityResponse where
        toJSONPB (GetLedgerIdentityResponse f1)
          = (HsJSONPB.object ["ledger_id" .= f1])
        toEncodingPB (GetLedgerIdentityResponse f1)
          = (HsJSONPB.pairs ["ledger_id" .= f1])
 
instance HsJSONPB.FromJSONPB GetLedgerIdentityResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetLedgerIdentityResponse"
               (\ obj ->
                  (Hs.pure GetLedgerIdentityResponse) <*> obj .: "ledger_id"))
 
instance HsJSONPB.ToJSON GetLedgerIdentityResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetLedgerIdentityResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetLedgerIdentityResponse where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getLedgerIdentityResponseLedgerId <- declare_ledger_id Proxy.Proxy
               let _ = Hs.pure GetLedgerIdentityResponse <*>
                         HsJSONPB.asProxy declare_ledger_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetLedgerIdentityResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getLedgerIdentityResponseLedgerId)]}})