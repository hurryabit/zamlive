{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.PackageService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
 
data PackageService request
     response = PackageService{packageServiceListPackages ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.ListPackagesRequest
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.ListPackagesResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.PackageService.ListPackagesResponse),
                               packageServiceGetPackage ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageRequest
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageResponse),
                               packageServiceGetPackageStatus ::
                               request 'HsGRPC.Normal
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageStatusRequest
                                 Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageStatusResponse
                                 ->
                                 Hs.IO
                                   (response 'HsGRPC.Normal
                                      Com.Digitalasset.Ledger.Api.V1.PackageService.GetPackageStatusResponse)}
              deriving Hs.Generic
 
packageServiceServer ::
                       PackageService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                         HsGRPC.ServiceOptions -> Hs.IO ()
packageServiceServer
  PackageService{packageServiceListPackages =
                   packageServiceListPackages,
                 packageServiceGetPackage = packageServiceGetPackage,
                 packageServiceGetPackageStatus = packageServiceGetPackageStatus}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.PackageService/ListPackages")
                                   (HsGRPC.convertGeneratedServerHandler
                                      packageServiceListPackages)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.PackageService/GetPackage")
                                   (HsGRPC.convertGeneratedServerHandler packageServiceGetPackage)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.PackageService/GetPackageStatus")
                                   (HsGRPC.convertGeneratedServerHandler
                                      packageServiceGetPackageStatus))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
packageServiceClient ::
                       HsGRPC.Client ->
                         Hs.IO (PackageService HsGRPC.ClientRequest HsGRPC.ClientResult)
packageServiceClient client
  = (Hs.pure PackageService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.PackageService/ListPackages")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.PackageService/GetPackage")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.PackageService/GetPackageStatus")))
 
data ListPackagesRequest = ListPackagesRequest{listPackagesRequestLedgerId
                                               :: Hs.Text,
                                               listPackagesRequestTraceContext ::
                                               Hs.Maybe
                                                 Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ListPackagesRequest where
        nameOf _ = (Hs.fromString "ListPackagesRequest")
 
instance HsProtobuf.HasDefault ListPackagesRequest
 
instance HsProtobuf.Message ListPackagesRequest where
        encodeMessage _
          ListPackagesRequest{listPackagesRequestLedgerId =
                                listPackagesRequestLedgerId,
                              listPackagesRequestTraceContext = listPackagesRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   listPackagesRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      listPackagesRequestTraceContext))])
        decodeMessage _
          = (Hs.pure ListPackagesRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ListPackagesRequest where
        toJSONPB (ListPackagesRequest f1 f1000)
          = (HsJSONPB.object ["ledger_id" .= f1, "trace_context" .= f1000])
        toEncodingPB (ListPackagesRequest f1 f1000)
          = (HsJSONPB.pairs ["ledger_id" .= f1, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB ListPackagesRequest where
        parseJSONPB
          = (HsJSONPB.withObject "ListPackagesRequest"
               (\ obj ->
                  (Hs.pure ListPackagesRequest) <*> obj .: "ledger_id" <*>
                    obj .: "trace_context"))
 
instance HsJSONPB.ToJSON ListPackagesRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ListPackagesRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ListPackagesRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               listPackagesRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               listPackagesRequestTraceContext <- declare_trace_context
                                                    Proxy.Proxy
               let _ = Hs.pure ListPackagesRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ListPackagesRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id", listPackagesRequestLedgerId),
                                                        ("trace_context",
                                                         listPackagesRequestTraceContext)]}})
 
data ListPackagesResponse = ListPackagesResponse{listPackagesResponsePackageIds
                                                 :: Hs.Vector Hs.Text}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ListPackagesResponse where
        nameOf _ = (Hs.fromString "ListPackagesResponse")
 
instance HsProtobuf.HasDefault ListPackagesResponse
 
instance HsProtobuf.Message ListPackagesResponse where
        encodeMessage _
          ListPackagesResponse{listPackagesResponsePackageIds =
                                 listPackagesResponsePackageIds}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      listPackagesResponsePackageIds))])
        decodeMessage _
          = (Hs.pure ListPackagesResponse) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "package_ids")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ListPackagesResponse where
        toJSONPB (ListPackagesResponse f1)
          = (HsJSONPB.object ["package_ids" .= f1])
        toEncodingPB (ListPackagesResponse f1)
          = (HsJSONPB.pairs ["package_ids" .= f1])
 
instance HsJSONPB.FromJSONPB ListPackagesResponse where
        parseJSONPB
          = (HsJSONPB.withObject "ListPackagesResponse"
               (\ obj -> (Hs.pure ListPackagesResponse) <*> obj .: "package_ids"))
 
instance HsJSONPB.ToJSON ListPackagesResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ListPackagesResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ListPackagesResponse where
        declareNamedSchema _
          = do let declare_package_ids = HsJSONPB.declareSchemaRef
               listPackagesResponsePackageIds <- declare_package_ids Proxy.Proxy
               let _ = Hs.pure ListPackagesResponse <*>
                         HsJSONPB.asProxy declare_package_ids
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ListPackagesResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("package_ids",
                                                         listPackagesResponsePackageIds)]}})
 
data GetPackageRequest = GetPackageRequest{getPackageRequestLedgerId
                                           :: Hs.Text,
                                           getPackageRequestPackageId :: Hs.Text,
                                           getPackageRequestTraceContext ::
                                           Hs.Maybe
                                             Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetPackageRequest where
        nameOf _ = (Hs.fromString "GetPackageRequest")
 
instance HsProtobuf.HasDefault GetPackageRequest
 
instance HsProtobuf.Message GetPackageRequest where
        encodeMessage _
          GetPackageRequest{getPackageRequestLedgerId =
                              getPackageRequestLedgerId,
                            getPackageRequestPackageId = getPackageRequestPackageId,
                            getPackageRequestTraceContext = getPackageRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getPackageRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getPackageRequestPackageId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getPackageRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetPackageRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "package_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetPackageRequest where
        toJSONPB (GetPackageRequest f1 f2 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "package_id" .= f2, "trace_context" .= f1000])
        toEncodingPB (GetPackageRequest f1 f2 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "package_id" .= f2, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetPackageRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetPackageRequest"
               (\ obj ->
                  (Hs.pure GetPackageRequest) <*> obj .: "ledger_id" <*>
                    obj .: "package_id"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetPackageRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetPackageRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetPackageRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getPackageRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_package_id = HsJSONPB.declareSchemaRef
               getPackageRequestPackageId <- declare_package_id Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getPackageRequestTraceContext <- declare_trace_context Proxy.Proxy
               let _ = Hs.pure GetPackageRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_package_id
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetPackageRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id", getPackageRequestLedgerId),
                                                        ("package_id", getPackageRequestPackageId),
                                                        ("trace_context",
                                                         getPackageRequestTraceContext)]}})
 
data GetPackageResponse = GetPackageResponse{getPackageResponseHashFunction
                                             ::
                                             HsProtobuf.Enumerated
                                               Com.Digitalasset.Ledger.Api.V1.PackageService.HashFunction,
                                             getPackageResponseArchivePayload :: Hs.ByteString,
                                             getPackageResponseHash :: Hs.Text}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetPackageResponse where
        nameOf _ = (Hs.fromString "GetPackageResponse")
 
instance HsProtobuf.HasDefault GetPackageResponse
 
instance HsProtobuf.Message GetPackageResponse where
        encodeMessage _
          GetPackageResponse{getPackageResponseHashFunction =
                               getPackageResponseHashFunction,
                             getPackageResponseArchivePayload =
                               getPackageResponseArchivePayload,
                             getPackageResponseHash = getPackageResponseHash}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getPackageResponseHashFunction),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getPackageResponseArchivePayload),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   getPackageResponseHash)])
        decodeMessage _
          = (Hs.pure GetPackageResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "HashFunction")))
                (HsProtobuf.Single "hash_function")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "archive_payload")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "hash")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetPackageResponse where
        toJSONPB (GetPackageResponse f1 f2 f3)
          = (HsJSONPB.object
               ["hash_function" .= f1, "archive_payload" .= f2, "hash" .= f3])
        toEncodingPB (GetPackageResponse f1 f2 f3)
          = (HsJSONPB.pairs
               ["hash_function" .= f1, "archive_payload" .= f2, "hash" .= f3])
 
instance HsJSONPB.FromJSONPB GetPackageResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetPackageResponse"
               (\ obj ->
                  (Hs.pure GetPackageResponse) <*> obj .: "hash_function" <*>
                    obj .: "archive_payload"
                    <*> obj .: "hash"))
 
instance HsJSONPB.ToJSON GetPackageResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetPackageResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetPackageResponse where
        declareNamedSchema _
          = do let declare_hash_function = HsJSONPB.declareSchemaRef
               getPackageResponseHashFunction <- declare_hash_function Proxy.Proxy
               let declare_archive_payload = HsJSONPB.declareSchemaRef
               getPackageResponseArchivePayload <- declare_archive_payload
                                                     Proxy.Proxy
               let declare_hash = HsJSONPB.declareSchemaRef
               getPackageResponseHash <- declare_hash Proxy.Proxy
               let _ = Hs.pure GetPackageResponse <*>
                         HsJSONPB.asProxy declare_hash_function
                         <*> HsJSONPB.asProxy declare_archive_payload
                         <*> HsJSONPB.asProxy declare_hash
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetPackageResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("hash_function",
                                                         getPackageResponseHashFunction),
                                                        ("archive_payload",
                                                         getPackageResponseArchivePayload),
                                                        ("hash", getPackageResponseHash)]}})
 
data GetPackageStatusRequest = GetPackageStatusRequest{getPackageStatusRequestLedgerId
                                                       :: Hs.Text,
                                                       getPackageStatusRequestPackageId :: Hs.Text,
                                                       getPackageStatusRequestTraceContext ::
                                                       Hs.Maybe
                                                         Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetPackageStatusRequest where
        nameOf _ = (Hs.fromString "GetPackageStatusRequest")
 
instance HsProtobuf.HasDefault GetPackageStatusRequest
 
instance HsProtobuf.Message GetPackageStatusRequest where
        encodeMessage _
          GetPackageStatusRequest{getPackageStatusRequestLedgerId =
                                    getPackageStatusRequestLedgerId,
                                  getPackageStatusRequestPackageId =
                                    getPackageStatusRequestPackageId,
                                  getPackageStatusRequestTraceContext =
                                    getPackageStatusRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getPackageStatusRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getPackageStatusRequestPackageId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getPackageStatusRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetPackageStatusRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "package_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetPackageStatusRequest where
        toJSONPB (GetPackageStatusRequest f1 f2 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "package_id" .= f2, "trace_context" .= f1000])
        toEncodingPB (GetPackageStatusRequest f1 f2 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "package_id" .= f2, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetPackageStatusRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetPackageStatusRequest"
               (\ obj ->
                  (Hs.pure GetPackageStatusRequest) <*> obj .: "ledger_id" <*>
                    obj .: "package_id"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetPackageStatusRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetPackageStatusRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetPackageStatusRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getPackageStatusRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_package_id = HsJSONPB.declareSchemaRef
               getPackageStatusRequestPackageId <- declare_package_id Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getPackageStatusRequestTraceContext <- declare_trace_context
                                                        Proxy.Proxy
               let _ = Hs.pure GetPackageStatusRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_package_id
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetPackageStatusRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getPackageStatusRequestLedgerId),
                                                        ("package_id",
                                                         getPackageStatusRequestPackageId),
                                                        ("trace_context",
                                                         getPackageStatusRequestTraceContext)]}})
 
data GetPackageStatusResponse = GetPackageStatusResponse{getPackageStatusResponsePackageStatus
                                                         ::
                                                         HsProtobuf.Enumerated
                                                           Com.Digitalasset.Ledger.Api.V1.PackageService.PackageStatus}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetPackageStatusResponse where
        nameOf _ = (Hs.fromString "GetPackageStatusResponse")
 
instance HsProtobuf.HasDefault GetPackageStatusResponse
 
instance HsProtobuf.Message GetPackageStatusResponse where
        encodeMessage _
          GetPackageStatusResponse{getPackageStatusResponsePackageStatus =
                                     getPackageStatusResponsePackageStatus}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getPackageStatusResponsePackageStatus)])
        decodeMessage _
          = (Hs.pure GetPackageStatusResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "PackageStatus")))
                (HsProtobuf.Single "package_status")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetPackageStatusResponse where
        toJSONPB (GetPackageStatusResponse f1)
          = (HsJSONPB.object ["package_status" .= f1])
        toEncodingPB (GetPackageStatusResponse f1)
          = (HsJSONPB.pairs ["package_status" .= f1])
 
instance HsJSONPB.FromJSONPB GetPackageStatusResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetPackageStatusResponse"
               (\ obj ->
                  (Hs.pure GetPackageStatusResponse) <*> obj .: "package_status"))
 
instance HsJSONPB.ToJSON GetPackageStatusResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetPackageStatusResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetPackageStatusResponse where
        declareNamedSchema _
          = do let declare_package_status = HsJSONPB.declareSchemaRef
               getPackageStatusResponsePackageStatus <- declare_package_status
                                                          Proxy.Proxy
               let _ = Hs.pure GetPackageStatusResponse <*>
                         HsJSONPB.asProxy declare_package_status
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetPackageStatusResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("package_status",
                                                         getPackageStatusResponsePackageStatus)]}})
 
data PackageStatus = PackageStatusUNKNOWN
                   | PackageStatusREGISTERED
                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PackageStatus where
        nameOf _ = (Hs.fromString "PackageStatus")
 
instance HsProtobuf.HasDefault PackageStatus
 
instance Hs.Bounded PackageStatus where
        minBound = PackageStatusUNKNOWN
        maxBound = PackageStatusREGISTERED
 
instance Hs.Ord PackageStatus where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum PackageStatus where
        toProtoEnumMay 0 = Hs.Just PackageStatusUNKNOWN
        toProtoEnumMay 1 = Hs.Just PackageStatusREGISTERED
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (PackageStatusUNKNOWN) = 0
        fromProtoEnum (PackageStatusREGISTERED) = 1
 
instance HsJSONPB.ToJSONPB PackageStatus where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB PackageStatus where
        parseJSONPB (HsJSONPB.String "UNKNOWN")
          = Hs.pure PackageStatusUNKNOWN
        parseJSONPB (HsJSONPB.String "REGISTERED")
          = Hs.pure PackageStatusREGISTERED
        parseJSONPB v = (HsJSONPB.typeMismatch "PackageStatus" v)
 
instance HsJSONPB.ToJSON PackageStatus where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PackageStatus where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite PackageStatus
 
data HashFunction = HashFunctionSHA256
                  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HashFunction where
        nameOf _ = (Hs.fromString "HashFunction")
 
instance HsProtobuf.HasDefault HashFunction
 
instance Hs.Bounded HashFunction where
        minBound = HashFunctionSHA256
        maxBound = HashFunctionSHA256
 
instance Hs.Ord HashFunction where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum HashFunction where
        toProtoEnumMay 0 = Hs.Just HashFunctionSHA256
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (HashFunctionSHA256) = 0
 
instance HsJSONPB.ToJSONPB HashFunction where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB HashFunction where
        parseJSONPB (HsJSONPB.String "SHA256") = Hs.pure HashFunctionSHA256
        parseJSONPB v = (HsJSONPB.typeMismatch "HashFunction" v)
 
instance HsJSONPB.ToJSON HashFunction where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HashFunction where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite HashFunction