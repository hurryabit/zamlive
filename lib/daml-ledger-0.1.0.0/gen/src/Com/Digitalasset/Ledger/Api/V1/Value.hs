{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.Value where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Google.Protobuf.Duration
import qualified Google.Protobuf.Empty
import qualified Google.Protobuf.Timestamp
 
data Value = Value{valueSum :: Hs.Maybe ValueSum}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Value where
        nameOf _ = (Hs.fromString "Value")
 
instance HsProtobuf.HasDefault Value
 
instance HsProtobuf.Message Value where
        encodeMessage _ Value{valueSum = valueSum}
          = (Hs.mconcat
               [case valueSum of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ValueSumRecord y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record)
                                        (Hs.Just y)))
                             ValueSumVariant y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Variant)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Variant)
                                        (Hs.Just y)))
                             ValueSumContractId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumList y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.List)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.List)
                                        (Hs.Just y)))
                             ValueSumInt64 y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit
                                        (Hs.coerce @(Hs.Int64) @(HsProtobuf.Signed Hs.Int64) y)))
                             ValueSumNumeric y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumText y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumTimestamp y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit
                                        (Hs.coerce @(Hs.Int64)
                                           @(HsProtobuf.Signed (HsProtobuf.Fixed Hs.Int64))
                                           y)))
                             ValueSumParty y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumBool y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumUnit y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 13)
                                     (Hs.coerce @(Hs.Maybe Google.Protobuf.Empty.Empty)
                                        @(HsProtobuf.Nested Google.Protobuf.Empty.Empty)
                                        (Hs.Just y)))
                             ValueSumDate y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 14)
                                     (HsProtobuf.ForceEmit y))
                             ValueSumOptional y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 15)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Optional)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Optional)
                                        (Hs.Just y)))
                             ValueSumMap y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 16)
                                     (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Map)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Map)
                                        (Hs.Just y)))
                             ValueSumEnum y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 17)
                                     (Hs.coerce
                                        @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Enum)
                                        @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Enum)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Value) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ValueSumRecord)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Record))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Record))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ValueSumVariant)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Variant))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Variant))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. ValueSumContractId)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ValueSumList)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.List))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.List))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.Just Hs.. ValueSumInt64)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Signed Hs.Int64)) @(_ Hs.Int64)
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.Just Hs.. ValueSumNumeric)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.Just Hs.. ValueSumText)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. ValueSumTimestamp)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Signed (HsProtobuf.Fixed Hs.Int64)))
                        @(_ Hs.Int64)
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 11),
                   (Hs.pure (Hs.Just Hs.. ValueSumParty)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 12),
                   (Hs.pure (Hs.Just Hs.. ValueSumBool)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 13),
                   (Hs.pure (Hs.fmap ValueSumUnit)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Google.Protobuf.Empty.Empty))
                        @(_ (Hs.Maybe Google.Protobuf.Empty.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 14),
                   (Hs.pure (Hs.Just Hs.. ValueSumDate)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 15),
                   (Hs.pure (Hs.fmap ValueSumOptional)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Optional))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Optional))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 16),
                   (Hs.pure (Hs.fmap ValueSumMap)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Map))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Map))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 17),
                   (Hs.pure (Hs.fmap ValueSumEnum)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Enum))
                        @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Enum))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Value where
        toJSONPB
          (Value
             f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f8_or_f9_or_f11_or_f12_or_f13_or_f14_or_f15_or_f16_or_f17)
          = (HsJSONPB.object
               [(let encodeSum
                       = (case
                            f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f8_or_f9_or_f11_or_f12_or_f13_or_f14_or_f15_or_f16_or_f17
                            of
                              Hs.Just (ValueSumRecord f1) -> (HsJSONPB.pair "record" f1)
                              Hs.Just (ValueSumVariant f2) -> (HsJSONPB.pair "variant" f2)
                              Hs.Just (ValueSumContractId f3) -> (HsJSONPB.pair "contract_id" f3)
                              Hs.Just (ValueSumList f4) -> (HsJSONPB.pair "list" f4)
                              Hs.Just (ValueSumInt64 f5) -> (HsJSONPB.pair "int64" f5)
                              Hs.Just (ValueSumNumeric f6) -> (HsJSONPB.pair "numeric" f6)
                              Hs.Just (ValueSumText f8) -> (HsJSONPB.pair "text" f8)
                              Hs.Just (ValueSumTimestamp f9) -> (HsJSONPB.pair "timestamp" f9)
                              Hs.Just (ValueSumParty f11) -> (HsJSONPB.pair "party" f11)
                              Hs.Just (ValueSumBool f12) -> (HsJSONPB.pair "bool" f12)
                              Hs.Just (ValueSumUnit f13) -> (HsJSONPB.pair "unit" f13)
                              Hs.Just (ValueSumDate f14) -> (HsJSONPB.pair "date" f14)
                              Hs.Just (ValueSumOptional f15) -> (HsJSONPB.pair "optional" f15)
                              Hs.Just (ValueSumMap f16) -> (HsJSONPB.pair "map" f16)
                              Hs.Just (ValueSumEnum f17) -> (HsJSONPB.pair "enum" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Sum" .= (HsJSONPB.objectOrNull [encodeSum] options)) options else
                       encodeSum options)])
        toEncodingPB
          (Value
             f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f8_or_f9_or_f11_or_f12_or_f13_or_f14_or_f15_or_f16_or_f17)
          = (HsJSONPB.pairs
               [(let encodeSum
                       = (case
                            f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f8_or_f9_or_f11_or_f12_or_f13_or_f14_or_f15_or_f16_or_f17
                            of
                              Hs.Just (ValueSumRecord f1) -> (HsJSONPB.pair "record" f1)
                              Hs.Just (ValueSumVariant f2) -> (HsJSONPB.pair "variant" f2)
                              Hs.Just (ValueSumContractId f3) -> (HsJSONPB.pair "contract_id" f3)
                              Hs.Just (ValueSumList f4) -> (HsJSONPB.pair "list" f4)
                              Hs.Just (ValueSumInt64 f5) -> (HsJSONPB.pair "int64" f5)
                              Hs.Just (ValueSumNumeric f6) -> (HsJSONPB.pair "numeric" f6)
                              Hs.Just (ValueSumText f8) -> (HsJSONPB.pair "text" f8)
                              Hs.Just (ValueSumTimestamp f9) -> (HsJSONPB.pair "timestamp" f9)
                              Hs.Just (ValueSumParty f11) -> (HsJSONPB.pair "party" f11)
                              Hs.Just (ValueSumBool f12) -> (HsJSONPB.pair "bool" f12)
                              Hs.Just (ValueSumUnit f13) -> (HsJSONPB.pair "unit" f13)
                              Hs.Just (ValueSumDate f14) -> (HsJSONPB.pair "date" f14)
                              Hs.Just (ValueSumOptional f15) -> (HsJSONPB.pair "optional" f15)
                              Hs.Just (ValueSumMap f16) -> (HsJSONPB.pair "map" f16)
                              Hs.Just (ValueSumEnum f17) -> (HsJSONPB.pair "enum" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Sum" .= (HsJSONPB.pairsOrNull [encodeSum] options)) options else
                       encodeSum options)])
 
instance HsJSONPB.FromJSONPB Value where
        parseJSONPB
          = (HsJSONPB.withObject "Value"
               (\ obj ->
                  (Hs.pure Value) <*>
                    (let parseSum parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ValueSumRecord <$>
                                  (HsJSONPB.parseField parseObj "record"),
                                Hs.Just Hs.. ValueSumVariant <$>
                                  (HsJSONPB.parseField parseObj "variant"),
                                Hs.Just Hs.. ValueSumContractId <$>
                                  (HsJSONPB.parseField parseObj "contract_id"),
                                Hs.Just Hs.. ValueSumList <$>
                                  (HsJSONPB.parseField parseObj "list"),
                                Hs.Just Hs.. ValueSumInt64 <$>
                                  (HsJSONPB.parseField parseObj "int64"),
                                Hs.Just Hs.. ValueSumNumeric <$>
                                  (HsJSONPB.parseField parseObj "numeric"),
                                Hs.Just Hs.. ValueSumText <$>
                                  (HsJSONPB.parseField parseObj "text"),
                                Hs.Just Hs.. ValueSumTimestamp <$>
                                  (HsJSONPB.parseField parseObj "timestamp"),
                                Hs.Just Hs.. ValueSumParty <$>
                                  (HsJSONPB.parseField parseObj "party"),
                                Hs.Just Hs.. ValueSumBool <$>
                                  (HsJSONPB.parseField parseObj "bool"),
                                Hs.Just Hs.. ValueSumUnit <$>
                                  (HsJSONPB.parseField parseObj "unit"),
                                Hs.Just Hs.. ValueSumDate <$>
                                  (HsJSONPB.parseField parseObj "date"),
                                Hs.Just Hs.. ValueSumOptional <$>
                                  (HsJSONPB.parseField parseObj "optional"),
                                Hs.Just Hs.. ValueSumMap <$> (HsJSONPB.parseField parseObj "map"),
                                Hs.Just Hs.. ValueSumEnum <$>
                                  (HsJSONPB.parseField parseObj "enum"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "Sum") Hs.>>= (HsJSONPB.withObject "Sum" parseSum)) <|>
                         (parseSum obj))))
 
instance HsJSONPB.ToJSON Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Value where
        declareNamedSchema _
          = do let declare_Sum = HsJSONPB.declareSchemaRef
               valueSum <- declare_Sum Proxy.Proxy
               let _ = Hs.pure Value <*> HsJSONPB.asProxy declare_Sum
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList [("Sum", valueSum)]}})
 
data ValueSum = ValueSumRecord Com.Digitalasset.Ledger.Api.V1.Value.Record
              | ValueSumVariant Com.Digitalasset.Ledger.Api.V1.Value.Variant
              | ValueSumContractId Hs.Text
              | ValueSumList Com.Digitalasset.Ledger.Api.V1.Value.List
              | ValueSumInt64 Hs.Int64
              | ValueSumNumeric Hs.Text
              | ValueSumText Hs.Text
              | ValueSumTimestamp Hs.Int64
              | ValueSumParty Hs.Text
              | ValueSumBool Hs.Bool
              | ValueSumUnit Google.Protobuf.Empty.Empty
              | ValueSumDate Hs.Int32
              | ValueSumOptional Com.Digitalasset.Ledger.Api.V1.Value.Optional
              | ValueSumMap Com.Digitalasset.Ledger.Api.V1.Value.Map
              | ValueSumEnum Com.Digitalasset.Ledger.Api.V1.Value.Enum
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ValueSum where
        nameOf _ = (Hs.fromString "ValueSum")
 
instance HsJSONPB.ToSchema ValueSum where
        declareNamedSchema _
          = do let declare_record = HsJSONPB.declareSchemaRef
               valueSumRecord <- declare_record Proxy.Proxy
               let _ = Hs.pure ValueSumRecord <*> HsJSONPB.asProxy declare_record
               let declare_variant = HsJSONPB.declareSchemaRef
               valueSumVariant <- declare_variant Proxy.Proxy
               let _ = Hs.pure ValueSumVariant <*>
                         HsJSONPB.asProxy declare_variant
               let declare_contract_id = HsJSONPB.declareSchemaRef
               valueSumContractId <- declare_contract_id Proxy.Proxy
               let _ = Hs.pure ValueSumContractId <*>
                         HsJSONPB.asProxy declare_contract_id
               let declare_list = HsJSONPB.declareSchemaRef
               valueSumList <- declare_list Proxy.Proxy
               let _ = Hs.pure ValueSumList <*> HsJSONPB.asProxy declare_list
               let declare_int64 = HsJSONPB.declareSchemaRef
               valueSumInt64 <- declare_int64 Proxy.Proxy
               let _ = Hs.pure ValueSumInt64 <*> HsJSONPB.asProxy declare_int64
               let declare_numeric = HsJSONPB.declareSchemaRef
               valueSumNumeric <- declare_numeric Proxy.Proxy
               let _ = Hs.pure ValueSumNumeric <*>
                         HsJSONPB.asProxy declare_numeric
               let declare_text = HsJSONPB.declareSchemaRef
               valueSumText <- declare_text Proxy.Proxy
               let _ = Hs.pure ValueSumText <*> HsJSONPB.asProxy declare_text
               let declare_timestamp = HsJSONPB.declareSchemaRef
               valueSumTimestamp <- declare_timestamp Proxy.Proxy
               let _ = Hs.pure ValueSumTimestamp <*>
                         HsJSONPB.asProxy declare_timestamp
               let declare_party = HsJSONPB.declareSchemaRef
               valueSumParty <- declare_party Proxy.Proxy
               let _ = Hs.pure ValueSumParty <*> HsJSONPB.asProxy declare_party
               let declare_bool = HsJSONPB.declareSchemaRef
               valueSumBool <- declare_bool Proxy.Proxy
               let _ = Hs.pure ValueSumBool <*> HsJSONPB.asProxy declare_bool
               let declare_unit = HsJSONPB.declareSchemaRef
               valueSumUnit <- declare_unit Proxy.Proxy
               let _ = Hs.pure ValueSumUnit <*> HsJSONPB.asProxy declare_unit
               let declare_date = HsJSONPB.declareSchemaRef
               valueSumDate <- declare_date Proxy.Proxy
               let _ = Hs.pure ValueSumDate <*> HsJSONPB.asProxy declare_date
               let declare_optional = HsJSONPB.declareSchemaRef
               valueSumOptional <- declare_optional Proxy.Proxy
               let _ = Hs.pure ValueSumOptional <*>
                         HsJSONPB.asProxy declare_optional
               let declare_map = HsJSONPB.declareSchemaRef
               valueSumMap <- declare_map Proxy.Proxy
               let _ = Hs.pure ValueSumMap <*> HsJSONPB.asProxy declare_map
               let declare_enum = HsJSONPB.declareSchemaRef
               valueSumEnum <- declare_enum Proxy.Proxy
               let _ = Hs.pure ValueSumEnum <*> HsJSONPB.asProxy declare_enum
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ValueSum",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("record", valueSumRecord),
                                                        ("variant", valueSumVariant),
                                                        ("contract_id", valueSumContractId),
                                                        ("list", valueSumList),
                                                        ("int64", valueSumInt64),
                                                        ("numeric", valueSumNumeric),
                                                        ("text", valueSumText),
                                                        ("timestamp", valueSumTimestamp),
                                                        ("party", valueSumParty),
                                                        ("bool", valueSumBool),
                                                        ("unit", valueSumUnit),
                                                        ("date", valueSumDate),
                                                        ("optional", valueSumOptional),
                                                        ("map", valueSumMap),
                                                        ("enum", valueSumEnum)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Record = Record{recordRecordId ::
                     Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                     recordFields ::
                     Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.RecordField}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Record where
        nameOf _ = (Hs.fromString "Record")
 
instance HsProtobuf.HasDefault Record
 
instance HsProtobuf.Message Record where
        encodeMessage _
          Record{recordRecordId = recordRecordId,
                 recordFields = recordFields}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      recordRecordId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.RecordField)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.RecordField)
                      recordFields))])
        decodeMessage _
          = (Hs.pure Record) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.RecordField))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.RecordField))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "record_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "RecordField")))
                (HsProtobuf.Single "fields")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Record where
        toJSONPB (Record f1 f2)
          = (HsJSONPB.object ["record_id" .= f1, "fields" .= f2])
        toEncodingPB (Record f1 f2)
          = (HsJSONPB.pairs ["record_id" .= f1, "fields" .= f2])
 
instance HsJSONPB.FromJSONPB Record where
        parseJSONPB
          = (HsJSONPB.withObject "Record"
               (\ obj ->
                  (Hs.pure Record) <*> obj .: "record_id" <*> obj .: "fields"))
 
instance HsJSONPB.ToJSON Record where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Record where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Record where
        declareNamedSchema _
          = do let declare_record_id = HsJSONPB.declareSchemaRef
               recordRecordId <- declare_record_id Proxy.Proxy
               let declare_fields = HsJSONPB.declareSchemaRef
               recordFields <- declare_fields Proxy.Proxy
               let _ = Hs.pure Record <*> HsJSONPB.asProxy declare_record_id <*>
                         HsJSONPB.asProxy declare_fields
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Record",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("record_id", recordRecordId),
                                                        ("fields", recordFields)]}})
 
data RecordField = RecordField{recordFieldLabel :: Hs.Text,
                               recordFieldValue ::
                               Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RecordField where
        nameOf _ = (Hs.fromString "RecordField")
 
instance HsProtobuf.HasDefault RecordField
 
instance HsProtobuf.Message RecordField where
        encodeMessage _
          RecordField{recordFieldLabel = recordFieldLabel,
                      recordFieldValue = recordFieldValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   recordFieldLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      recordFieldValue))])
        decodeMessage _
          = (Hs.pure RecordField) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RecordField where
        toJSONPB (RecordField f1 f2)
          = (HsJSONPB.object ["label" .= f1, "value" .= f2])
        toEncodingPB (RecordField f1 f2)
          = (HsJSONPB.pairs ["label" .= f1, "value" .= f2])
 
instance HsJSONPB.FromJSONPB RecordField where
        parseJSONPB
          = (HsJSONPB.withObject "RecordField"
               (\ obj ->
                  (Hs.pure RecordField) <*> obj .: "label" <*> obj .: "value"))
 
instance HsJSONPB.ToJSON RecordField where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RecordField where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RecordField where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               recordFieldLabel <- declare_label Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               recordFieldValue <- declare_value Proxy.Proxy
               let _ = Hs.pure RecordField <*> HsJSONPB.asProxy declare_label <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RecordField",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", recordFieldLabel),
                                                        ("value", recordFieldValue)]}})
 
data Identifier = Identifier{identifierPackageId :: Hs.Text,
                             identifierModuleName :: Hs.Text, identifierEntityName :: Hs.Text}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Identifier where
        nameOf _ = (Hs.fromString "Identifier")
 
instance HsProtobuf.HasDefault Identifier
 
instance HsProtobuf.Message Identifier where
        encodeMessage _
          Identifier{identifierPackageId = identifierPackageId,
                     identifierModuleName = identifierModuleName,
                     identifierEntityName = identifierEntityName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   identifierPackageId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   identifierModuleName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   identifierEntityName)])
        decodeMessage _
          = (Hs.pure Identifier) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "package_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "module_name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "entity_name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Identifier where
        toJSONPB (Identifier f1 f3 f4)
          = (HsJSONPB.object
               ["package_id" .= f1, "module_name" .= f3, "entity_name" .= f4])
        toEncodingPB (Identifier f1 f3 f4)
          = (HsJSONPB.pairs
               ["package_id" .= f1, "module_name" .= f3, "entity_name" .= f4])
 
instance HsJSONPB.FromJSONPB Identifier where
        parseJSONPB
          = (HsJSONPB.withObject "Identifier"
               (\ obj ->
                  (Hs.pure Identifier) <*> obj .: "package_id" <*>
                    obj .: "module_name"
                    <*> obj .: "entity_name"))
 
instance HsJSONPB.ToJSON Identifier where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Identifier where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Identifier where
        declareNamedSchema _
          = do let declare_package_id = HsJSONPB.declareSchemaRef
               identifierPackageId <- declare_package_id Proxy.Proxy
               let declare_module_name = HsJSONPB.declareSchemaRef
               identifierModuleName <- declare_module_name Proxy.Proxy
               let declare_entity_name = HsJSONPB.declareSchemaRef
               identifierEntityName <- declare_entity_name Proxy.Proxy
               let _ = Hs.pure Identifier <*> HsJSONPB.asProxy declare_package_id
                         <*> HsJSONPB.asProxy declare_module_name
                         <*> HsJSONPB.asProxy declare_entity_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Identifier",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("package_id", identifierPackageId),
                                                        ("module_name", identifierModuleName),
                                                        ("entity_name", identifierEntityName)]}})
 
data Variant = Variant{variantVariantId ::
                       Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                       variantConstructor :: Hs.Text,
                       variantValue ::
                       Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Variant where
        nameOf _ = (Hs.fromString "Variant")
 
instance HsProtobuf.HasDefault Variant
 
instance HsProtobuf.Message Variant where
        encodeMessage _
          Variant{variantVariantId = variantVariantId,
                  variantConstructor = variantConstructor,
                  variantValue = variantValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      variantVariantId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   variantConstructor),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      variantValue))])
        decodeMessage _
          = (Hs.pure Variant) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "variant_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "constructor")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Variant where
        toJSONPB (Variant f1 f2 f3)
          = (HsJSONPB.object
               ["variant_id" .= f1, "constructor" .= f2, "value" .= f3])
        toEncodingPB (Variant f1 f2 f3)
          = (HsJSONPB.pairs
               ["variant_id" .= f1, "constructor" .= f2, "value" .= f3])
 
instance HsJSONPB.FromJSONPB Variant where
        parseJSONPB
          = (HsJSONPB.withObject "Variant"
               (\ obj ->
                  (Hs.pure Variant) <*> obj .: "variant_id" <*> obj .: "constructor"
                    <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Variant where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Variant where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Variant where
        declareNamedSchema _
          = do let declare_variant_id = HsJSONPB.declareSchemaRef
               variantVariantId <- declare_variant_id Proxy.Proxy
               let declare_constructor = HsJSONPB.declareSchemaRef
               variantConstructor <- declare_constructor Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               variantValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Variant <*> HsJSONPB.asProxy declare_variant_id <*>
                         HsJSONPB.asProxy declare_constructor
                         <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Variant",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("variant_id", variantVariantId),
                                                        ("constructor", variantConstructor),
                                                        ("value", variantValue)]}})
 
data Enum = Enum{enumEnumId ::
                 Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier,
                 enumConstructor :: Hs.Text}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Enum where
        nameOf _ = (Hs.fromString "Enum")
 
instance HsProtobuf.HasDefault Enum
 
instance HsProtobuf.Message Enum where
        encodeMessage _
          Enum{enumEnumId = enumEnumId, enumConstructor = enumConstructor}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier)
                      enumEnumId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   enumConstructor)])
        decodeMessage _
          = (Hs.pure Enum) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Identifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Identifier")))
                (HsProtobuf.Single "enum_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "constructor")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Enum where
        toJSONPB (Enum f1 f2)
          = (HsJSONPB.object ["enum_id" .= f1, "constructor" .= f2])
        toEncodingPB (Enum f1 f2)
          = (HsJSONPB.pairs ["enum_id" .= f1, "constructor" .= f2])
 
instance HsJSONPB.FromJSONPB Enum where
        parseJSONPB
          = (HsJSONPB.withObject "Enum"
               (\ obj ->
                  (Hs.pure Enum) <*> obj .: "enum_id" <*> obj .: "constructor"))
 
instance HsJSONPB.ToJSON Enum where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Enum where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Enum where
        declareNamedSchema _
          = do let declare_enum_id = HsJSONPB.declareSchemaRef
               enumEnumId <- declare_enum_id Proxy.Proxy
               let declare_constructor = HsJSONPB.declareSchemaRef
               enumConstructor <- declare_constructor Proxy.Proxy
               let _ = Hs.pure Enum <*> HsJSONPB.asProxy declare_enum_id <*>
                         HsJSONPB.asProxy declare_constructor
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Enum",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("enum_id", enumEnumId),
                                                        ("constructor", enumConstructor)]}})
 
data List = List{listElements ::
                 Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Value}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named List where
        nameOf _ = (Hs.fromString "List")
 
instance HsProtobuf.HasDefault List
 
instance HsProtobuf.Message List where
        encodeMessage _ List{listElements = listElements}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      listElements))])
        decodeMessage _
          = (Hs.pure List) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "elements")
                []
                "")]
 
instance HsJSONPB.ToJSONPB List where
        toJSONPB (List f1) = (HsJSONPB.object ["elements" .= f1])
        toEncodingPB (List f1) = (HsJSONPB.pairs ["elements" .= f1])
 
instance HsJSONPB.FromJSONPB List where
        parseJSONPB
          = (HsJSONPB.withObject "List"
               (\ obj -> (Hs.pure List) <*> obj .: "elements"))
 
instance HsJSONPB.ToJSON List where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON List where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema List where
        declareNamedSchema _
          = do let declare_elements = HsJSONPB.declareSchemaRef
               listElements <- declare_elements Proxy.Proxy
               let _ = Hs.pure List <*> HsJSONPB.asProxy declare_elements
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "List",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("elements", listElements)]}})
 
data Optional = Optional{optionalValue ::
                         Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Optional where
        nameOf _ = (Hs.fromString "Optional")
 
instance HsProtobuf.HasDefault Optional
 
instance HsProtobuf.Message Optional where
        encodeMessage _ Optional{optionalValue = optionalValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      optionalValue))])
        decodeMessage _
          = (Hs.pure Optional) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Optional where
        toJSONPB (Optional f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (Optional f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB Optional where
        parseJSONPB
          = (HsJSONPB.withObject "Optional"
               (\ obj -> (Hs.pure Optional) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Optional where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Optional where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Optional where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               optionalValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Optional <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Optional",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", optionalValue)]}})
 
data Map = Map{mapEntries ::
               Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Map_Entry}
         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Map where
        nameOf _ = (Hs.fromString "Map")
 
instance HsProtobuf.HasDefault Map
 
instance HsProtobuf.Message Map where
        encodeMessage _ Map{mapEntries = mapEntries}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Map_Entry)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.Map_Entry)
                      mapEntries))])
        decodeMessage _
          = (Hs.pure Map) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Value.Map_Entry))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Value.Map_Entry))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Entry")))
                (HsProtobuf.Single "entries")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Map where
        toJSONPB (Map f1) = (HsJSONPB.object ["entries" .= f1])
        toEncodingPB (Map f1) = (HsJSONPB.pairs ["entries" .= f1])
 
instance HsJSONPB.FromJSONPB Map where
        parseJSONPB
          = (HsJSONPB.withObject "Map"
               (\ obj -> (Hs.pure Map) <*> obj .: "entries"))
 
instance HsJSONPB.ToJSON Map where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Map where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Map where
        declareNamedSchema _
          = do let declare_entries = HsJSONPB.declareSchemaRef
               mapEntries <- declare_entries Proxy.Proxy
               let _ = Hs.pure Map <*> HsJSONPB.asProxy declare_entries
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Map",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("entries", mapEntries)]}})
 
data Map_Entry = Map_Entry{map_EntryKey :: Hs.Text,
                           map_EntryValue ::
                           Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Map_Entry where
        nameOf _ = (Hs.fromString "Map_Entry")
 
instance HsProtobuf.HasDefault Map_Entry
 
instance HsProtobuf.Message Map_Entry where
        encodeMessage _
          Map_Entry{map_EntryKey = map_EntryKey,
                    map_EntryValue = map_EntryValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   map_EntryKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value)
                      map_EntryValue))])
        decodeMessage _
          = (Hs.pure Map_Entry) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Value.Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Value")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Map_Entry where
        toJSONPB (Map_Entry f1 f2)
          = (HsJSONPB.object ["key" .= f1, "value" .= f2])
        toEncodingPB (Map_Entry f1 f2)
          = (HsJSONPB.pairs ["key" .= f1, "value" .= f2])
 
instance HsJSONPB.FromJSONPB Map_Entry where
        parseJSONPB
          = (HsJSONPB.withObject "Map_Entry"
               (\ obj -> (Hs.pure Map_Entry) <*> obj .: "key" <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Map_Entry where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Map_Entry where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Map_Entry where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               map_EntryKey <- declare_key Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               map_EntryValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Map_Entry <*> HsJSONPB.asProxy declare_key <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Map_Entry",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", map_EntryKey),
                                                        ("value", map_EntryValue)]}})