{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Com.Digitalasset.Ledger.Api.V1.TransactionService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Com.Digitalasset.Ledger.Api.V1.TransactionFilter
import qualified Com.Digitalasset.Ledger.Api.V1.LedgerOffset
import qualified Com.Digitalasset.Ledger.Api.V1.TraceContext
import qualified Com.Digitalasset.Ledger.Api.V1.Transaction
 
data TransactionService request
     response = TransactionService{transactionServiceGetTransactions ::
                                   request 'HsGRPC.ServerStreaming
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionsRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionsResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.ServerStreaming
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionsResponse),
                                   transactionServiceGetTransactionTrees ::
                                   request 'HsGRPC.ServerStreaming
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionsRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionTreesResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.ServerStreaming
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionTreesResponse),
                                   transactionServiceGetTransactionByEventId ::
                                   request 'HsGRPC.Normal
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionByEventIdRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.Normal
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionResponse),
                                   transactionServiceGetTransactionById ::
                                   request 'HsGRPC.Normal
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionByIdRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.Normal
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionResponse),
                                   transactionServiceGetFlatTransactionByEventId ::
                                   request 'HsGRPC.Normal
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionByEventIdRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetFlatTransactionResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.Normal
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetFlatTransactionResponse),
                                   transactionServiceGetFlatTransactionById ::
                                   request 'HsGRPC.Normal
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetTransactionByIdRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetFlatTransactionResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.Normal
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetFlatTransactionResponse),
                                   transactionServiceGetLedgerEnd ::
                                   request 'HsGRPC.Normal
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetLedgerEndRequest
                                     Com.Digitalasset.Ledger.Api.V1.TransactionService.GetLedgerEndResponse
                                     ->
                                     Hs.IO
                                       (response 'HsGRPC.Normal
                                          Com.Digitalasset.Ledger.Api.V1.TransactionService.GetLedgerEndResponse)}
              deriving Hs.Generic
 
transactionServiceServer ::
                           TransactionService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                             HsGRPC.ServiceOptions -> Hs.IO ()
transactionServiceServer
  TransactionService{transactionServiceGetTransactions =
                       transactionServiceGetTransactions,
                     transactionServiceGetTransactionTrees =
                       transactionServiceGetTransactionTrees,
                     transactionServiceGetTransactionByEventId =
                       transactionServiceGetTransactionByEventId,
                     transactionServiceGetTransactionById =
                       transactionServiceGetTransactionById,
                     transactionServiceGetFlatTransactionByEventId =
                       transactionServiceGetFlatTransactionByEventId,
                     transactionServiceGetFlatTransactionById =
                       transactionServiceGetFlatTransactionById,
                     transactionServiceGetLedgerEnd = transactionServiceGetLedgerEnd}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionByEventId")
                                   (HsGRPC.convertGeneratedServerHandler
                                      transactionServiceGetTransactionByEventId)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionById")
                                   (HsGRPC.convertGeneratedServerHandler
                                      transactionServiceGetTransactionById)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionByEventId")
                                   (HsGRPC.convertGeneratedServerHandler
                                      transactionServiceGetFlatTransactionByEventId)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionById")
                                   (HsGRPC.convertGeneratedServerHandler
                                      transactionServiceGetFlatTransactionById)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetLedgerEnd")
                                   (HsGRPC.convertGeneratedServerHandler
                                      transactionServiceGetLedgerEnd))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers =
                               [(HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactions")
                                   (HsGRPC.convertGeneratedServerWriterHandler
                                      transactionServiceGetTransactions)),
                                (HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName
                                      "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionTrees")
                                   (HsGRPC.convertGeneratedServerWriterHandler
                                      transactionServiceGetTransactionTrees))],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
transactionServiceClient ::
                           HsGRPC.Client ->
                             Hs.IO (TransactionService HsGRPC.ClientRequest HsGRPC.ClientResult)
transactionServiceClient client
  = (Hs.pure TransactionService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactions")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionTrees")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionByEventId")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionById")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionByEventId")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionById")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/com.digitalasset.ledger.api.v1.TransactionService/GetLedgerEnd")))
 
data GetTransactionsRequest = GetTransactionsRequest{getTransactionsRequestLedgerId
                                                     :: Hs.Text,
                                                     getTransactionsRequestBegin ::
                                                     Hs.Maybe
                                                       Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset,
                                                     getTransactionsRequestEnd ::
                                                     Hs.Maybe
                                                       Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset,
                                                     getTransactionsRequestFilter ::
                                                     Hs.Maybe
                                                       Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter,
                                                     getTransactionsRequestVerbose :: Hs.Bool,
                                                     getTransactionsRequestTraceContext ::
                                                     Hs.Maybe
                                                       Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionsRequest where
        nameOf _ = (Hs.fromString "GetTransactionsRequest")
 
instance HsProtobuf.HasDefault GetTransactionsRequest
 
instance HsProtobuf.Message GetTransactionsRequest where
        encodeMessage _
          GetTransactionsRequest{getTransactionsRequestLedgerId =
                                   getTransactionsRequestLedgerId,
                                 getTransactionsRequestBegin = getTransactionsRequestBegin,
                                 getTransactionsRequestEnd = getTransactionsRequestEnd,
                                 getTransactionsRequestFilter = getTransactionsRequestFilter,
                                 getTransactionsRequestVerbose = getTransactionsRequestVerbose,
                                 getTransactionsRequestTraceContext =
                                   getTransactionsRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getTransactionsRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      getTransactionsRequestBegin)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      getTransactionsRequestEnd)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter)
                      getTransactionsRequestFilter)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   getTransactionsRequestVerbose),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getTransactionsRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetTransactionsRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TransactionFilter.TransactionFilter))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "LedgerOffset")))
                (HsProtobuf.Single "begin")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "LedgerOffset")))
                (HsProtobuf.Single "end")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TransactionFilter")))
                (HsProtobuf.Single "filter")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "verbose")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionsRequest where
        toJSONPB (GetTransactionsRequest f1 f2 f3 f4 f5 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "begin" .= f2, "end" .= f3, "filter" .= f4,
                "verbose" .= f5, "trace_context" .= f1000])
        toEncodingPB (GetTransactionsRequest f1 f2 f3 f4 f5 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "begin" .= f2, "end" .= f3, "filter" .= f4,
                "verbose" .= f5, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetTransactionsRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionsRequest"
               (\ obj ->
                  (Hs.pure GetTransactionsRequest) <*> obj .: "ledger_id" <*>
                    obj .: "begin"
                    <*> obj .: "end"
                    <*> obj .: "filter"
                    <*> obj .: "verbose"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetTransactionsRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionsRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionsRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getTransactionsRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_begin = HsJSONPB.declareSchemaRef
               getTransactionsRequestBegin <- declare_begin Proxy.Proxy
               let declare_end = HsJSONPB.declareSchemaRef
               getTransactionsRequestEnd <- declare_end Proxy.Proxy
               let declare_filter = HsJSONPB.declareSchemaRef
               getTransactionsRequestFilter <- declare_filter Proxy.Proxy
               let declare_verbose = HsJSONPB.declareSchemaRef
               getTransactionsRequestVerbose <- declare_verbose Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getTransactionsRequestTraceContext <- declare_trace_context
                                                       Proxy.Proxy
               let _ = Hs.pure GetTransactionsRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_begin
                         <*> HsJSONPB.asProxy declare_end
                         <*> HsJSONPB.asProxy declare_filter
                         <*> HsJSONPB.asProxy declare_verbose
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionsRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getTransactionsRequestLedgerId),
                                                        ("begin", getTransactionsRequestBegin),
                                                        ("end", getTransactionsRequestEnd),
                                                        ("filter", getTransactionsRequestFilter),
                                                        ("verbose", getTransactionsRequestVerbose),
                                                        ("trace_context",
                                                         getTransactionsRequestTraceContext)]}})
 
data GetTransactionsResponse = GetTransactionsResponse{getTransactionsResponseTransactions
                                                       ::
                                                       Hs.Vector
                                                         Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionsResponse where
        nameOf _ = (Hs.fromString "GetTransactionsResponse")
 
instance HsProtobuf.HasDefault GetTransactionsResponse
 
instance HsProtobuf.Message GetTransactionsResponse where
        encodeMessage _
          GetTransactionsResponse{getTransactionsResponseTransactions =
                                    getTransactionsResponseTransactions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      getTransactionsResponseTransactions))])
        decodeMessage _
          = (Hs.pure GetTransactionsResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Transaction")))
                (HsProtobuf.Single "transactions")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionsResponse where
        toJSONPB (GetTransactionsResponse f1)
          = (HsJSONPB.object ["transactions" .= f1])
        toEncodingPB (GetTransactionsResponse f1)
          = (HsJSONPB.pairs ["transactions" .= f1])
 
instance HsJSONPB.FromJSONPB GetTransactionsResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionsResponse"
               (\ obj ->
                  (Hs.pure GetTransactionsResponse) <*> obj .: "transactions"))
 
instance HsJSONPB.ToJSON GetTransactionsResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionsResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionsResponse where
        declareNamedSchema _
          = do let declare_transactions = HsJSONPB.declareSchemaRef
               getTransactionsResponseTransactions <- declare_transactions
                                                        Proxy.Proxy
               let _ = Hs.pure GetTransactionsResponse <*>
                         HsJSONPB.asProxy declare_transactions
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionsResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transactions",
                                                         getTransactionsResponseTransactions)]}})
 
data GetTransactionTreesResponse = GetTransactionTreesResponse{getTransactionTreesResponseTransactions
                                                               ::
                                                               Hs.Vector
                                                                 Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionTreesResponse where
        nameOf _ = (Hs.fromString "GetTransactionTreesResponse")
 
instance HsProtobuf.HasDefault GetTransactionTreesResponse
 
instance HsProtobuf.Message GetTransactionTreesResponse where
        encodeMessage _
          GetTransactionTreesResponse{getTransactionTreesResponseTransactions
                                        = getTransactionTreesResponseTransactions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Vector Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      @(HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      getTransactionTreesResponseTransactions))])
        decodeMessage _
          = (Hs.pure GetTransactionTreesResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 @(_ (Hs.Vector Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "TransactionTree")))
                (HsProtobuf.Single "transactions")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionTreesResponse where
        toJSONPB (GetTransactionTreesResponse f1)
          = (HsJSONPB.object ["transactions" .= f1])
        toEncodingPB (GetTransactionTreesResponse f1)
          = (HsJSONPB.pairs ["transactions" .= f1])
 
instance HsJSONPB.FromJSONPB GetTransactionTreesResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionTreesResponse"
               (\ obj ->
                  (Hs.pure GetTransactionTreesResponse) <*> obj .: "transactions"))
 
instance HsJSONPB.ToJSON GetTransactionTreesResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionTreesResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionTreesResponse where
        declareNamedSchema _
          = do let declare_transactions = HsJSONPB.declareSchemaRef
               getTransactionTreesResponseTransactions <- declare_transactions
                                                            Proxy.Proxy
               let _ = Hs.pure GetTransactionTreesResponse <*>
                         HsJSONPB.asProxy declare_transactions
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionTreesResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transactions",
                                                         getTransactionTreesResponseTransactions)]}})
 
data GetTransactionByEventIdRequest = GetTransactionByEventIdRequest{getTransactionByEventIdRequestLedgerId
                                                                     :: Hs.Text,
                                                                     getTransactionByEventIdRequestEventId
                                                                     :: Hs.Text,
                                                                     getTransactionByEventIdRequestRequestingParties
                                                                     :: Hs.Vector Hs.Text,
                                                                     getTransactionByEventIdRequestTraceContext
                                                                     ::
                                                                     Hs.Maybe
                                                                       Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionByEventIdRequest where
        nameOf _ = (Hs.fromString "GetTransactionByEventIdRequest")
 
instance HsProtobuf.HasDefault GetTransactionByEventIdRequest
 
instance HsProtobuf.Message GetTransactionByEventIdRequest where
        encodeMessage _
          GetTransactionByEventIdRequest{getTransactionByEventIdRequestLedgerId
                                           = getTransactionByEventIdRequestLedgerId,
                                         getTransactionByEventIdRequestEventId =
                                           getTransactionByEventIdRequestEventId,
                                         getTransactionByEventIdRequestRequestingParties =
                                           getTransactionByEventIdRequestRequestingParties,
                                         getTransactionByEventIdRequestTraceContext =
                                           getTransactionByEventIdRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getTransactionByEventIdRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getTransactionByEventIdRequestEventId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      getTransactionByEventIdRequestRequestingParties)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getTransactionByEventIdRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetTransactionByEventIdRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "event_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "requesting_parties")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionByEventIdRequest where
        toJSONPB (GetTransactionByEventIdRequest f1 f2 f3 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "event_id" .= f2, "requesting_parties" .= f3,
                "trace_context" .= f1000])
        toEncodingPB (GetTransactionByEventIdRequest f1 f2 f3 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "event_id" .= f2, "requesting_parties" .= f3,
                "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetTransactionByEventIdRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionByEventIdRequest"
               (\ obj ->
                  (Hs.pure GetTransactionByEventIdRequest) <*> obj .: "ledger_id" <*>
                    obj .: "event_id"
                    <*> obj .: "requesting_parties"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetTransactionByEventIdRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionByEventIdRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionByEventIdRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getTransactionByEventIdRequestLedgerId <- declare_ledger_id
                                                           Proxy.Proxy
               let declare_event_id = HsJSONPB.declareSchemaRef
               getTransactionByEventIdRequestEventId <- declare_event_id
                                                          Proxy.Proxy
               let declare_requesting_parties = HsJSONPB.declareSchemaRef
               getTransactionByEventIdRequestRequestingParties <- declare_requesting_parties
                                                                    Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getTransactionByEventIdRequestTraceContext <- declare_trace_context
                                                               Proxy.Proxy
               let _ = Hs.pure GetTransactionByEventIdRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_event_id
                         <*> HsJSONPB.asProxy declare_requesting_parties
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionByEventIdRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getTransactionByEventIdRequestLedgerId),
                                                        ("event_id",
                                                         getTransactionByEventIdRequestEventId),
                                                        ("requesting_parties",
                                                         getTransactionByEventIdRequestRequestingParties),
                                                        ("trace_context",
                                                         getTransactionByEventIdRequestTraceContext)]}})
 
data GetTransactionByIdRequest = GetTransactionByIdRequest{getTransactionByIdRequestLedgerId
                                                           :: Hs.Text,
                                                           getTransactionByIdRequestTransactionId ::
                                                           Hs.Text,
                                                           getTransactionByIdRequestRequestingParties
                                                           :: Hs.Vector Hs.Text,
                                                           getTransactionByIdRequestTraceContext ::
                                                           Hs.Maybe
                                                             Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionByIdRequest where
        nameOf _ = (Hs.fromString "GetTransactionByIdRequest")
 
instance HsProtobuf.HasDefault GetTransactionByIdRequest
 
instance HsProtobuf.Message GetTransactionByIdRequest where
        encodeMessage _
          GetTransactionByIdRequest{getTransactionByIdRequestLedgerId =
                                      getTransactionByIdRequestLedgerId,
                                    getTransactionByIdRequestTransactionId =
                                      getTransactionByIdRequestTransactionId,
                                    getTransactionByIdRequestRequestingParties =
                                      getTransactionByIdRequestRequestingParties,
                                    getTransactionByIdRequestTraceContext =
                                      getTransactionByIdRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getTransactionByIdRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getTransactionByIdRequestTransactionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      getTransactionByIdRequestRequestingParties)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getTransactionByIdRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetTransactionByIdRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "transaction_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "requesting_parties")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionByIdRequest where
        toJSONPB (GetTransactionByIdRequest f1 f2 f3 f1000)
          = (HsJSONPB.object
               ["ledger_id" .= f1, "transaction_id" .= f2,
                "requesting_parties" .= f3, "trace_context" .= f1000])
        toEncodingPB (GetTransactionByIdRequest f1 f2 f3 f1000)
          = (HsJSONPB.pairs
               ["ledger_id" .= f1, "transaction_id" .= f2,
                "requesting_parties" .= f3, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetTransactionByIdRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionByIdRequest"
               (\ obj ->
                  (Hs.pure GetTransactionByIdRequest) <*> obj .: "ledger_id" <*>
                    obj .: "transaction_id"
                    <*> obj .: "requesting_parties"
                    <*> obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetTransactionByIdRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionByIdRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionByIdRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getTransactionByIdRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_transaction_id = HsJSONPB.declareSchemaRef
               getTransactionByIdRequestTransactionId <- declare_transaction_id
                                                           Proxy.Proxy
               let declare_requesting_parties = HsJSONPB.declareSchemaRef
               getTransactionByIdRequestRequestingParties <- declare_requesting_parties
                                                               Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getTransactionByIdRequestTraceContext <- declare_trace_context
                                                          Proxy.Proxy
               let _ = Hs.pure GetTransactionByIdRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_transaction_id
                         <*> HsJSONPB.asProxy declare_requesting_parties
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionByIdRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id",
                                                         getTransactionByIdRequestLedgerId),
                                                        ("transaction_id",
                                                         getTransactionByIdRequestTransactionId),
                                                        ("requesting_parties",
                                                         getTransactionByIdRequestRequestingParties),
                                                        ("trace_context",
                                                         getTransactionByIdRequestTraceContext)]}})
 
data GetTransactionResponse = GetTransactionResponse{getTransactionResponseTransaction
                                                     ::
                                                     Hs.Maybe
                                                       Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetTransactionResponse where
        nameOf _ = (Hs.fromString "GetTransactionResponse")
 
instance HsProtobuf.HasDefault GetTransactionResponse
 
instance HsProtobuf.Message GetTransactionResponse where
        encodeMessage _
          GetTransactionResponse{getTransactionResponseTransaction =
                                   getTransactionResponseTransaction}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree)
                      getTransactionResponseTransaction))])
        decodeMessage _
          = (Hs.pure GetTransactionResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.TransactionTree))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TransactionTree")))
                (HsProtobuf.Single "transaction")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetTransactionResponse where
        toJSONPB (GetTransactionResponse f1)
          = (HsJSONPB.object ["transaction" .= f1])
        toEncodingPB (GetTransactionResponse f1)
          = (HsJSONPB.pairs ["transaction" .= f1])
 
instance HsJSONPB.FromJSONPB GetTransactionResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetTransactionResponse"
               (\ obj ->
                  (Hs.pure GetTransactionResponse) <*> obj .: "transaction"))
 
instance HsJSONPB.ToJSON GetTransactionResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetTransactionResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetTransactionResponse where
        declareNamedSchema _
          = do let declare_transaction = HsJSONPB.declareSchemaRef
               getTransactionResponseTransaction <- declare_transaction
                                                      Proxy.Proxy
               let _ = Hs.pure GetTransactionResponse <*>
                         HsJSONPB.asProxy declare_transaction
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetTransactionResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction",
                                                         getTransactionResponseTransaction)]}})
 
data GetFlatTransactionResponse = GetFlatTransactionResponse{getFlatTransactionResponseTransaction
                                                             ::
                                                             Hs.Maybe
                                                               Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetFlatTransactionResponse where
        nameOf _ = (Hs.fromString "GetFlatTransactionResponse")
 
instance HsProtobuf.HasDefault GetFlatTransactionResponse
 
instance HsProtobuf.Message GetFlatTransactionResponse where
        encodeMessage _
          GetFlatTransactionResponse{getFlatTransactionResponseTransaction =
                                       getFlatTransactionResponseTransaction}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction)
                      getFlatTransactionResponseTransaction))])
        decodeMessage _
          = (Hs.pure GetFlatTransactionResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.Transaction.Transaction))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Transaction")))
                (HsProtobuf.Single "transaction")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetFlatTransactionResponse where
        toJSONPB (GetFlatTransactionResponse f1)
          = (HsJSONPB.object ["transaction" .= f1])
        toEncodingPB (GetFlatTransactionResponse f1)
          = (HsJSONPB.pairs ["transaction" .= f1])
 
instance HsJSONPB.FromJSONPB GetFlatTransactionResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetFlatTransactionResponse"
               (\ obj ->
                  (Hs.pure GetFlatTransactionResponse) <*> obj .: "transaction"))
 
instance HsJSONPB.ToJSON GetFlatTransactionResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetFlatTransactionResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetFlatTransactionResponse where
        declareNamedSchema _
          = do let declare_transaction = HsJSONPB.declareSchemaRef
               getFlatTransactionResponseTransaction <- declare_transaction
                                                          Proxy.Proxy
               let _ = Hs.pure GetFlatTransactionResponse <*>
                         HsJSONPB.asProxy declare_transaction
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetFlatTransactionResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction",
                                                         getFlatTransactionResponseTransaction)]}})
 
data GetLedgerEndRequest = GetLedgerEndRequest{getLedgerEndRequestLedgerId
                                               :: Hs.Text,
                                               getLedgerEndRequestTraceContext ::
                                               Hs.Maybe
                                                 Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetLedgerEndRequest where
        nameOf _ = (Hs.fromString "GetLedgerEndRequest")
 
instance HsProtobuf.HasDefault GetLedgerEndRequest
 
instance HsProtobuf.Message GetLedgerEndRequest where
        encodeMessage _
          GetLedgerEndRequest{getLedgerEndRequestLedgerId =
                                getLedgerEndRequestLedgerId,
                              getLedgerEndRequestTraceContext = getLedgerEndRequestTraceContext}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getLedgerEndRequestLedgerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1000)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext)
                      getLedgerEndRequestTraceContext))])
        decodeMessage _
          = (Hs.pure GetLedgerEndRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.TraceContext.TraceContext))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1000)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "ledger_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1000)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TraceContext")))
                (HsProtobuf.Single "trace_context")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetLedgerEndRequest where
        toJSONPB (GetLedgerEndRequest f1 f1000)
          = (HsJSONPB.object ["ledger_id" .= f1, "trace_context" .= f1000])
        toEncodingPB (GetLedgerEndRequest f1 f1000)
          = (HsJSONPB.pairs ["ledger_id" .= f1, "trace_context" .= f1000])
 
instance HsJSONPB.FromJSONPB GetLedgerEndRequest where
        parseJSONPB
          = (HsJSONPB.withObject "GetLedgerEndRequest"
               (\ obj ->
                  (Hs.pure GetLedgerEndRequest) <*> obj .: "ledger_id" <*>
                    obj .: "trace_context"))
 
instance HsJSONPB.ToJSON GetLedgerEndRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetLedgerEndRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetLedgerEndRequest where
        declareNamedSchema _
          = do let declare_ledger_id = HsJSONPB.declareSchemaRef
               getLedgerEndRequestLedgerId <- declare_ledger_id Proxy.Proxy
               let declare_trace_context = HsJSONPB.declareSchemaRef
               getLedgerEndRequestTraceContext <- declare_trace_context
                                                    Proxy.Proxy
               let _ = Hs.pure GetLedgerEndRequest <*>
                         HsJSONPB.asProxy declare_ledger_id
                         <*> HsJSONPB.asProxy declare_trace_context
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetLedgerEndRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("ledger_id", getLedgerEndRequestLedgerId),
                                                        ("trace_context",
                                                         getLedgerEndRequestTraceContext)]}})
 
data GetLedgerEndResponse = GetLedgerEndResponse{getLedgerEndResponseOffset
                                                 ::
                                                 Hs.Maybe
                                                   Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named GetLedgerEndResponse where
        nameOf _ = (Hs.fromString "GetLedgerEndResponse")
 
instance HsProtobuf.HasDefault GetLedgerEndResponse
 
instance HsProtobuf.Message GetLedgerEndResponse where
        encodeMessage _
          GetLedgerEndResponse{getLedgerEndResponseOffset =
                                 getLedgerEndResponseOffset}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      @(HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset)
                      getLedgerEndResponseOffset))])
        decodeMessage _
          = (Hs.pure GetLedgerEndResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 @(_ (Hs.Maybe Com.Digitalasset.Ledger.Api.V1.LedgerOffset.LedgerOffset))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "LedgerOffset")))
                (HsProtobuf.Single "offset")
                []
                "")]
 
instance HsJSONPB.ToJSONPB GetLedgerEndResponse where
        toJSONPB (GetLedgerEndResponse f1)
          = (HsJSONPB.object ["offset" .= f1])
        toEncodingPB (GetLedgerEndResponse f1)
          = (HsJSONPB.pairs ["offset" .= f1])
 
instance HsJSONPB.FromJSONPB GetLedgerEndResponse where
        parseJSONPB
          = (HsJSONPB.withObject "GetLedgerEndResponse"
               (\ obj -> (Hs.pure GetLedgerEndResponse) <*> obj .: "offset"))
 
instance HsJSONPB.ToJSON GetLedgerEndResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON GetLedgerEndResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema GetLedgerEndResponse where
        declareNamedSchema _
          = do let declare_offset = HsJSONPB.declareSchemaRef
               getLedgerEndResponseOffset <- declare_offset Proxy.Proxy
               let _ = Hs.pure GetLedgerEndResponse <*>
                         HsJSONPB.asProxy declare_offset
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetLedgerEndResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("offset", getLedgerEndResponseOffset)]}})