{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Google.Protobuf.Wrappers where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data DoubleValue = DoubleValue{doubleValueValue :: Hs.Double}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DoubleValue where
        nameOf _ = (Hs.fromString "DoubleValue")
 
instance HsProtobuf.HasDefault DoubleValue
 
instance HsProtobuf.Message DoubleValue where
        encodeMessage _ DoubleValue{doubleValueValue = doubleValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   doubleValueValue)])
        decodeMessage _
          = (Hs.pure DoubleValue) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Double)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB DoubleValue where
        toJSONPB (DoubleValue f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (DoubleValue f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB DoubleValue where
        parseJSONPB
          = (HsJSONPB.withObject "DoubleValue"
               (\ obj -> (Hs.pure DoubleValue) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON DoubleValue where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DoubleValue where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DoubleValue where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               doubleValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure DoubleValue <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DoubleValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", doubleValueValue)]}})
 
data FloatValue = FloatValue{floatValueValue :: Hs.Float}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FloatValue where
        nameOf _ = (Hs.fromString "FloatValue")
 
instance HsProtobuf.HasDefault FloatValue
 
instance HsProtobuf.Message FloatValue where
        encodeMessage _ FloatValue{floatValueValue = floatValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   floatValueValue)])
        decodeMessage _
          = (Hs.pure FloatValue) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Float)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB FloatValue where
        toJSONPB (FloatValue f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (FloatValue f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB FloatValue where
        parseJSONPB
          = (HsJSONPB.withObject "FloatValue"
               (\ obj -> (Hs.pure FloatValue) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON FloatValue where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON FloatValue where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema FloatValue where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               floatValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure FloatValue <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "FloatValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", floatValueValue)]}})
 
data Int64Value = Int64Value{int64ValueValue :: Hs.Int64}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Int64Value where
        nameOf _ = (Hs.fromString "Int64Value")
 
instance HsProtobuf.HasDefault Int64Value
 
instance HsProtobuf.Message Int64Value where
        encodeMessage _ Int64Value{int64ValueValue = int64ValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   int64ValueValue)])
        decodeMessage _
          = (Hs.pure Int64Value) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Int64Value where
        toJSONPB (Int64Value f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (Int64Value f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB Int64Value where
        parseJSONPB
          = (HsJSONPB.withObject "Int64Value"
               (\ obj -> (Hs.pure Int64Value) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Int64Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Int64Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Int64Value where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               int64ValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Int64Value <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Int64Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", int64ValueValue)]}})
 
data UInt64Value = UInt64Value{uint64ValueValue :: Hs.Word64}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named UInt64Value where
        nameOf _ = (Hs.fromString "UInt64Value")
 
instance HsProtobuf.HasDefault UInt64Value
 
instance HsProtobuf.Message UInt64Value where
        encodeMessage _ UInt64Value{uint64ValueValue = uint64ValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   uint64ValueValue)])
        decodeMessage _
          = (Hs.pure UInt64Value) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB UInt64Value where
        toJSONPB (UInt64Value f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (UInt64Value f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB UInt64Value where
        parseJSONPB
          = (HsJSONPB.withObject "UInt64Value"
               (\ obj -> (Hs.pure UInt64Value) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON UInt64Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON UInt64Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema UInt64Value where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               uint64ValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure UInt64Value <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "UInt64Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", uint64ValueValue)]}})
 
data Int32Value = Int32Value{int32ValueValue :: Hs.Int32}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Int32Value where
        nameOf _ = (Hs.fromString "Int32Value")
 
instance HsProtobuf.HasDefault Int32Value
 
instance HsProtobuf.Message Int32Value where
        encodeMessage _ Int32Value{int32ValueValue = int32ValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   int32ValueValue)])
        decodeMessage _
          = (Hs.pure Int32Value) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Int32Value where
        toJSONPB (Int32Value f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (Int32Value f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB Int32Value where
        parseJSONPB
          = (HsJSONPB.withObject "Int32Value"
               (\ obj -> (Hs.pure Int32Value) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Int32Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Int32Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Int32Value where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               int32ValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Int32Value <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Int32Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", int32ValueValue)]}})
 
data UInt32Value = UInt32Value{uint32ValueValue :: Hs.Word32}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named UInt32Value where
        nameOf _ = (Hs.fromString "UInt32Value")
 
instance HsProtobuf.HasDefault UInt32Value
 
instance HsProtobuf.Message UInt32Value where
        encodeMessage _ UInt32Value{uint32ValueValue = uint32ValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   uint32ValueValue)])
        decodeMessage _
          = (Hs.pure UInt32Value) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB UInt32Value where
        toJSONPB (UInt32Value f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (UInt32Value f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB UInt32Value where
        parseJSONPB
          = (HsJSONPB.withObject "UInt32Value"
               (\ obj -> (Hs.pure UInt32Value) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON UInt32Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON UInt32Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema UInt32Value where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               uint32ValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure UInt32Value <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "UInt32Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", uint32ValueValue)]}})
 
data BoolValue = BoolValue{boolValueValue :: Hs.Bool}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BoolValue where
        nameOf _ = (Hs.fromString "BoolValue")
 
instance HsProtobuf.HasDefault BoolValue
 
instance HsProtobuf.Message BoolValue where
        encodeMessage _ BoolValue{boolValueValue = boolValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   boolValueValue)])
        decodeMessage _
          = (Hs.pure BoolValue) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BoolValue where
        toJSONPB (BoolValue f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (BoolValue f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB BoolValue where
        parseJSONPB
          = (HsJSONPB.withObject "BoolValue"
               (\ obj -> (Hs.pure BoolValue) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON BoolValue where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BoolValue where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BoolValue where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               boolValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure BoolValue <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BoolValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", boolValueValue)]}})
 
data StringValue = StringValue{stringValueValue :: Hs.Text}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named StringValue where
        nameOf _ = (Hs.fromString "StringValue")
 
instance HsProtobuf.HasDefault StringValue
 
instance HsProtobuf.Message StringValue where
        encodeMessage _ StringValue{stringValueValue = stringValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   stringValueValue)])
        decodeMessage _
          = (Hs.pure StringValue) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB StringValue where
        toJSONPB (StringValue f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (StringValue f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB StringValue where
        parseJSONPB
          = (HsJSONPB.withObject "StringValue"
               (\ obj -> (Hs.pure StringValue) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON StringValue where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON StringValue where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema StringValue where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               stringValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure StringValue <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StringValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", stringValueValue)]}})
 
data BytesValue = BytesValue{bytesValueValue :: Hs.ByteString}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BytesValue where
        nameOf _ = (Hs.fromString "BytesValue")
 
instance HsProtobuf.HasDefault BytesValue
 
instance HsProtobuf.Message BytesValue where
        encodeMessage _ BytesValue{bytesValueValue = bytesValueValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   bytesValueValue)])
        decodeMessage _
          = (Hs.pure BytesValue) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BytesValue where
        toJSONPB (BytesValue f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (BytesValue f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB BytesValue where
        parseJSONPB
          = (HsJSONPB.withObject "BytesValue"
               (\ obj -> (Hs.pure BytesValue) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON BytesValue where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BytesValue where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BytesValue where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               bytesValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure BytesValue <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BytesValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", bytesValueValue)]}})