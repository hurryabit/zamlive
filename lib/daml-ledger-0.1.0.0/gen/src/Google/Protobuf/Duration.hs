{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Google.Protobuf.Duration where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Duration = Duration{durationSeconds :: Hs.Int64,
                         durationNanos :: Hs.Int32}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Duration where
        nameOf _ = (Hs.fromString "Duration")
 
instance HsProtobuf.HasDefault Duration
 
instance HsProtobuf.Message Duration where
        encodeMessage _
          Duration{durationSeconds = durationSeconds,
                   durationNanos = durationNanos}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   durationSeconds),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   durationNanos)])
        decodeMessage _
          = (Hs.pure Duration) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "seconds")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "nanos")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Duration where
        toJSONPB (Duration f1 f2)
          = (HsJSONPB.object ["seconds" .= f1, "nanos" .= f2])
        toEncodingPB (Duration f1 f2)
          = (HsJSONPB.pairs ["seconds" .= f1, "nanos" .= f2])
 
instance HsJSONPB.FromJSONPB Duration where
        parseJSONPB
          = (HsJSONPB.withObject "Duration"
               (\ obj ->
                  (Hs.pure Duration) <*> obj .: "seconds" <*> obj .: "nanos"))
 
instance HsJSONPB.ToJSON Duration where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Duration where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Duration where
        declareNamedSchema _
          = do let declare_seconds = HsJSONPB.declareSchemaRef
               durationSeconds <- declare_seconds Proxy.Proxy
               let declare_nanos = HsJSONPB.declareSchemaRef
               durationNanos <- declare_nanos Proxy.Proxy
               let _ = Hs.pure Duration <*> HsJSONPB.asProxy declare_seconds <*>
                         HsJSONPB.asProxy declare_nanos
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Duration",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("seconds", durationSeconds),
                                                        ("nanos", durationNanos)]}})